{:use-macros nil, :excludes #{}, :name rpi-wall.clock, :imports nil, :requires {reagent.core reagent.core, cljs-time.local cljs-time.local, cljs-time.format cljs-time.format}, :uses {atom reagent.core, unparse cljs-time.format, local-now cljs-time.local, formatter cljs-time.format}, :defs {clock-state {:name rpi-wall.clock/clock-state, :file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 6, :column 6, :end-line 6, :end-column 17}}, tick {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 8, :column 7, :end-line 8, :end-column 11, :arglists (quote ([]))}, :name rpi-wall.clock/tick, :variadic false, :file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, format-time {:name rpi-wall.clock/format-time, :file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 12, :column 1, :end-line 12, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 12, :column 6, :end-line 12, :end-column 17}}, format-date {:name rpi-wall.clock/format-date, :file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 15, :column 1, :end-line 15, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 15, :column 6, :end-line 15, :end-column 17}}, clock {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([]))}, :name rpi-wall.clock/clock, :variadic false, :file "/home/rilla/code/clojure/clojurescript/rpi_wall/src/rpi_wall/clock.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:h2 :h1 :div.clock}, :order [:div.clock :h1 :h2]}, :doc nil}