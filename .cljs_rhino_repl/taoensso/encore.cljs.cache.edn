{:use-macros {now-udt* taoensso.encore, new-object taoensso.encore, if-not taoensso.encore, -gc-now? taoensso.encore, when-let taoensso.encore, cond! taoensso.encore, have taoensso.encore, -cas! taoensso.encore, when-not taoensso.encore, when taoensso.encore, is cljs.test, compile-if taoensso.encore, have! taoensso.encore, name-with-attrs taoensso.encore, -vol! taoensso.encore, -vol-reset! taoensso.encore, have? taoensso.encore, defonce taoensso.encore, cond taoensso.encore, if-let taoensso.encore, deprecated taoensso.encore, catching taoensso.encore, now-nano* taoensso.encore, now-dt* taoensso.encore, -vol-swap! taoensso.encore}, :excludes #{qualified-keyword? boolean? some? simple-symbol? merge-with if-not float? when-let format uri? when-not when int? indexed? simple-keyword? neg-int? update-in run! defonce bytes? ident? qualified-ident? merge cond nat-int? pos-int? if-let simple-ident? qualified-symbol?}, :name taoensso.encore, :imports nil, :requires {goog.net.XhrIoPool goog.net.XhrIoPool, gevents goog.events, set clojure.set, test cljs.test, cljs.tools.reader.edn cljs.tools.reader.edn, taoensso.truss taoensso.truss, goog.net.XhrIo goog.net.XhrIo, gquery-data goog.Uri.QueryData, goog.string goog.string, goog.Uri.QueryData goog.Uri.QueryData, gobj goog.object, cljs.test cljs.test, goog.object goog.object, gxhr-pool goog.net.XhrIoPool, goog.string.StringBuffer goog.string.StringBuffer, truss taoensso.truss, goog.net.EventType goog.net.EventType, clojure.set clojure.set, goog.structs goog.structs, goog.string.format goog.string.format, gstructs goog.structs, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, gstr goog.string, edn cljs.tools.reader.edn, goog.events goog.events, goog.net.ErrorCode goog.net.ErrorCode, gxhr goog.net.XhrIo}, :uses nil, :defs {encore-version {:name taoensso.encore/encore-version, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 89, :column 1, :end-line 89, :end-column 20, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 89, :column 6, :end-line 89, :end-column 20}}, as-?nat-int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 624, :column 9, :end-line 624, :end-column 20, :arglists (quote ([x]))}, :name taoensso.encore/as-?nat-int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 624, :end-line 624, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, memoize-a1_ {:name taoensso.encore/memoize-a1_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3131, :column 3, :end-line 3131, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3131, :column 8, :end-line 3131, :end-column 19}}, TickedCacheEntry {:num-fields 4, :protocols #{}, :name taoensso.encore/TickedCacheEntry, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :type true, :column 10, :line 1630, :record false, :end-line 1630, :skip-protocol-flag nil}, removev {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3310, :column 9, :end-line 3310, :end-column 16, :arglists (quote ([pred coll]))}, :name taoensso.encore/removev, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3310, :end-line 3310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, timeout-future? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3042, :column 23, :end-line 3042, :end-column 38, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/timeout-future?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 38, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 3042, :ret-tag boolean, :end-line 3042, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-nzero {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 662, :column 9, :end-line 662, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-nzero, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 662, :end-line 662, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, swap-in!* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1491, :column 9, :end-line 1491, :end-column 18, :arglists (quote ([atom_ f] [atom_ ks f] [atom_ ks not-found f])), :doc "Like `swap!` but supports `update-in` semantics,\n    returns [<old-key-val> <new-key-val>].", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/swap-in!*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists-meta (nil nil nil)}, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 1491, :end-line 1491, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :doc "Like `swap!` but supports `update-in` semantics,\n    returns [<old-key-val> <new-key-val>]."}, atom-tag {:name taoensso.encore/atom-tag, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 1323, :column 3, :end-line 1323, :end-column 34, :const true, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1323, :column 26, :end-line 1323, :end-column 34, :const true, :private true}}, -swap-k1! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1364, :column 10, :end-line 1364, :end-column 19, :private true, :arglists (quote ([return atom_ k not-found f]))}, :private true, :name taoensso.encore/-swap-k1!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([return atom_ k not-found f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1364, :end-line 1364, :max-fixed-arity 5, :fn-var true, :arglists (quote ([return atom_ k not-found f]))}, reduce-indexed {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 806, :column 7, :end-line 806, :end-column 21, :arglists (quote ([rf init coll])), :doc "Like `reduce` but takes (rf [acc idx in]) with idx as in `map-indexed`."}, :name taoensso.encore/reduce-indexed, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([rf init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 806, :end-line 806, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rf init coll])), :doc "Like `reduce` but takes (rf [acc idx in]) with idx as in `map-indexed`."}, nneg-int? {:name taoensso.encore/nneg-int?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3138, :column 3, :end-line 3138, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3138, :column 8, :end-line 3138, :end-column 17}}, error? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 482, :column 23, :end-line 482, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/error?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 482, :ret-tag boolean, :end-line 482, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ->?singleton {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3360, :column 9, :end-line 3360, :end-column 21, :arglists (quote ([coll]))}, :name taoensso.encore/->?singleton, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3360, :end-line 3360, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, set* {:name taoensso.encore/set*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 987, :column 5, :end-line 987, :end-column 14, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 987, :column 10, :end-line 987, :end-column 14}}, sayp {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2525, :column 9, :end-line 2525, :end-column 13, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.encore/sayp, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2525, :end-line 2525, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, now-udt {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1519, :column 9, :end-line 1519, :end-column 16, :arglists (quote ([]))}, :name taoensso.encore/now-udt, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1519, :end-line 1519, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, qualified-keyword? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 492, :column 18, :end-line 492, :end-column 36, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/qualified-keyword?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 36, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 492, :ret-tag boolean, :end-line 492, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-?kw {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 596, :column 9, :end-line 596, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/as-?kw, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 596, :end-line 596, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, reduce-kvs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 784, :column 9, :end-line 784, :end-column 19, :arglists (quote ([rf init kvs])), :doc "Like `reduce-kv` but takes a flat sequence of kv pairs."}, :name taoensso.encore/reduce-kvs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([rf init kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 784, :end-line 784, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rf init kvs])), :doc "Like `reduce-kv` but takes a flat sequence of kv pairs."}, url-decode {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2781, :column 7, :end-line 2781, :end-column 17, :arglists (quote ([s & [encoding]])), :doc "Stolen from http://goo.gl/99NSR1", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}}, :name taoensso.encore/url-decode, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}, :method-params [(s [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2781, :end-line 2781, :max-fixed-arity 1, :fn-var true, :arglists ([s & [encoding]]), :doc "Stolen from http://goo.gl/99NSR1"}, -swap-cache! {:name taoensso.encore/-swap-cache!, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3160, :column 3, :end-line 3160, :end-column 20, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3160, :column 8, :end-line 3160, :end-column 20}}, str-builder? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1951, :column 23, :end-line 1951, :end-column 35, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/str-builder?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 35, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 1951, :ret-tag boolean, :end-line 1951, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, every {:name taoensso.encore/every, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3152, :column 3, :end-line 3152, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3152, :column 8, :end-line 3152, :end-column 13}}, parse-query-params {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2813, :column 7, :end-line 2813, :end-column 25, :arglists (quote ([s & [keywordize? encoding]])), :doc "Based on `ring-codec/form-decode`.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [keywordize? encoding])], :arglists ([s & [keywordize? encoding]]), :arglists-meta (nil)}}, :name taoensso.encore/parse-query-params, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [keywordize? encoding])], :arglists ([s & [keywordize? encoding]]), :arglists-meta (nil)}, :method-params [(s [keywordize? encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2813, :end-line 2813, :max-fixed-arity 1, :fn-var true, :arglists ([s & [keywordize? encoding]]), :doc "Based on `ring-codec/form-decode`."}, dissoc-in {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1210, :column 7, :end-line 1210, :end-column 16, :arglists (quote ([m ks dissoc-k] [m ks dissoc-k & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m ks dissoc-k]), :arglists ([m ks dissoc-k] [m ks dissoc-k & more]), :arglists-meta (nil nil)}}, :name taoensso.encore/dissoc-in, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m ks dissoc-k]), :arglists ([m ks dissoc-k] [m ks dissoc-k & more]), :arglists-meta (nil nil)}, :method-params ([m ks dissoc-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1210, :end-line 1210, :max-fixed-arity 3, :fn-var true, :arglists ([m ks dissoc-k] [m ks dissoc-k & more])}, norm-word-breaks {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2196, :column 7, :end-line 2196, :end-column 23, :arglists (quote ([s])), :doc "Converts all word breaks of any form and length (including line breaks of any\n  form, tabs, spaces, etc.) to a single regular space."}, :name taoensso.encore/norm-word-breaks, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2196, :end-line 2196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts all word breaks of any form and length (including line breaks of any\n  form, tabs, spaces, etc.) to a single regular space."}, rcompare {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2244, :column 14, :end-line 2244, :end-column 22, :arglists (quote ([x y])), :doc "Reverse comparator."}, :name taoensso.encore/rcompare, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 2244, :end-line 2244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Reverse comparator."}, -unswapped {:name taoensso.encore/-unswapped, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3161, :column 3, :end-line 3161, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3161, :column 8, :end-line 3161, :end-column 18}}, Swapped {:num-fields 2, :protocols #{}, :name taoensso.encore/Swapped, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :type true, :column 12, :line 1311, :record false, :end-line 1311, :skip-protocol-flag nil}, merge-meta {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 930, :column 7, :end-line 930, :end-column 17, :arglists (quote ([x m]))}, :name taoensso.encore/merge-meta, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 930, :end-line 930, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x m]))}, ms {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2288, :column 7, :end-line 2288, :end-column 9, :arglists (quote ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}])), :doc "Returns ~number of milliseconds in period defined by given args.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :arglists-meta (nil)}}, :name taoensso.encore/ms, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :arglists-meta (nil)}, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2288, :end-line 2288, :max-fixed-arity 0, :fn-var true, :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :doc "Returns ~number of milliseconds in period defined by given args."}, limiter* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1810, :column 7, :end-line 1810, :end-column 15, :arglists (quote ([specs])), :doc "Experimental. Like `limiter` but returns [<limiter> <state_>]."}, :name taoensso.encore/limiter*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1810, :end-line 1810, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs])), :doc "Experimental. Like `limiter` but returns [<limiter> <state_>]."}, str-ends-with? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2013, :column 44, :end-line 2013, :end-column 58, :tag boolean, :arglists (quote ([s substr]))}, :name taoensso.encore/str-ends-with?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 58, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2013, :ret-tag boolean, :end-line 2013, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr]))}, nested-merge {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1292, :column 9, :end-line 1292, :end-column 21, :arglists (quote ([& maps])), :doc "Like `merge` but does nested merging.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name taoensso.encore/nested-merge, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 1292, :end-line 1292, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like `merge` but does nested merging."}, rate-limited {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3224, :column 9, :end-line 3224, :end-column 21, :arglists (quote ([ncalls-limit window-ms f]))}, :name taoensso.encore/rate-limited, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([ncalls-limit window-ms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3224, :end-line 3224, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ncalls-limit window-ms f]))}, format-query-string {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2789, :column 7, :end-line 2789, :end-column 26, :arglists (quote ([m]))}, :name taoensso.encore/format-query-string, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2789, :end-line 2789, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, is! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 645, :column 7, :end-line 645, :end-column 10, :arglists (quote ([x] [pred x] [pred x fail-?data])), :doc "Cheaper `have!` that provides less diagnostic info.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [pred x] [pred x fail-?data]), :arglists ([x] [pred x] [pred x fail-?data]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/is!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [pred x] [pred x fail-?data]), :arglists ([x] [pred x] [pred x fail-?data]), :arglists-meta (nil nil nil)}, :method-params ([x] [pred x] [pred x fail-?data]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 3, :fn-var true, :arglists ([x] [pred x] [pred x fail-?data]), :doc "Cheaper `have!` that provides less diagnostic info."}, ?substr<idx {:name taoensso.encore/?substr<idx, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3155, :column 3, :end-line 3155, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3155, :column 8, :end-line 3155, :end-column 19}}, log {:name taoensso.encore/log, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2523, :column 3, :end-line 2523, :end-column 12, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2523, :column 9, :end-line 2523, :end-column 12}}, nano-time {:name taoensso.encore/nano-time, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3158, :column 3, :end-line 3158, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3158, :column 8, :end-line 3158, :end-column 17}}, clamp {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 861, :column 7, :end-line 861, :end-column 12, :arglists (quote ([nmin nmax n]))}, :name taoensso.encore/clamp, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :method-params ([nmin nmax n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :end-line 861, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nmin nmax n]))}, memoized {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3313, :column 9, :end-line 3313, :end-column 17, :arglists (quote ([cache f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cache f args)], :arglists ([cache f & args]), :arglists-meta (nil)}}, :name taoensso.encore/memoized, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cache f args)], :arglists ([cache f & args]), :arglists-meta (nil)}, :method-params [(cache f args)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3313, :end-line 3313, :max-fixed-arity 2, :fn-var true, :arglists ([cache f & args])}, uint? {:name taoensso.encore/uint?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3140, :column 3, :end-line 3140, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3140, :column 8, :end-line 3140, :end-column 13}}, as-pfloat {:name taoensso.encore/as-pfloat, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3150, :column 3, :end-line 3150, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3150, :column 8, :end-line 3150, :end-column 17}}, -vswapped {:name taoensso.encore/-vswapped, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3162, :column 3, :end-line 3162, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3162, :column 8, :end-line 3162, :end-column 17}}, log? {:name taoensso.encore/log?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3242, :column 5, :end-line 3242, :end-column 24, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3242, :column 20, :end-line 3242, :end-column 24, :private true}}, greatest {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3254, :column 9, :end-line 3254, :end-column 17, :arglists (quote ([coll & [?comparator]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}}, :name taoensso.encore/greatest, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}, :method-params [(coll [?comparator])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3254, :end-line 3254, :max-fixed-arity 1, :fn-var true, :arglists ([coll & [?comparator]])}, -as-throw {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 657, :column 7, :end-line 657, :end-column 16, :arglists (quote ([as-name x]))}, :name taoensso.encore/-as-throw, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([as-name x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 2, :fn-var true, :arglists (quote ([as-name x]))}, str-join {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1980, :column 9, :end-line 1980, :end-column 17, :arglists (quote ([coll] [separator coll] [separator xform coll])), :doc "Faster, transducer-based generalization of `clojure.string/join` with `xform`\n    support", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll] [separator coll] [separator xform coll]), :arglists ([coll] [separator coll] [separator xform coll]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/str-join, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll] [separator coll] [separator xform coll]), :arglists ([coll] [separator coll] [separator xform coll]), :arglists-meta (nil nil nil)}, :method-params ([coll] [separator coll] [separator xform coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 1980, :end-line 1980, :max-fixed-arity 3, :fn-var true, :arglists ([coll] [separator coll] [separator xform coll]), :doc "Faster, transducer-based generalization of `clojure.string/join` with `xform`\n    support"}, merge-keywords {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 707, :column 7, :end-line 707, :end-column 21, :arglists (quote ([ks] [ks omit-slash?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks] [ks omit-slash?]), :arglists ([ks] [ks omit-slash?]), :arglists-meta (nil nil)}}, :name taoensso.encore/merge-keywords, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks] [ks omit-slash?]), :arglists ([ks] [ks omit-slash?]), :arglists-meta (nil nil)}, :method-params ([ks] [ks omit-slash?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 2, :fn-var true, :arglists ([ks] [ks omit-slash?])}, ->LimitEntry {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1794, :column 10, :end-line 1794, :end-column 20, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([n udt0]))}, :protocols #{}, :name taoensso.encore/->LimitEntry, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([n udt0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 1794, :end-line 1794, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n udt0])), :skip-protocol-flag nil}, boolean? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 474, :column 18, :end-line 474, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/boolean?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 474, :ret-tag boolean, :end-line 474, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, queue* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 982, :column 7, :end-line 982, :end-column 13, :arglists (quote ([& items])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(items)], :arglists ([& items]), :arglists-meta (nil)}}, :name taoensso.encore/queue*, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(items)], :arglists ([& items]), :arglists-meta (nil)}, :method-params [(items)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 0, :fn-var true, :arglists ([& items])}, atom? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 483, :column 24, :end-line 483, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/atom?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 483, :ret-tag boolean, :end-line 483, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, chan? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 578, :column 25, :end-line 578, :end-column 30, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/chan?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 578, :ret-tag boolean, :end-line 578, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ITimeoutImpl {:meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2967, :column 18, :end-line 2967, :end-column 30, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-schedule-timeout [[_ msecs f]]}}}, :protocol-symbol true, :name taoensso.encore/ITimeoutImpl, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :column 3, :line 2967, :protocol-info {:methods {-schedule-timeout [[_ msecs f]]}}, :info nil, :end-line 2967, :impls #{taoensso.encore/DefaultTimeoutImpl}, :doc nil, :jsdoc ("@interface")}, keywordize-map {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3309, :column 9, :end-line 3309, :end-column 23, :arglists (quote ([m]))}, :name taoensso.encore/keywordize-map, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3309, :end-line 3309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, subvec* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3349, :column 9, :end-line 3349, :end-column 16, :arglists (quote ([v start-idx & [?max-len]])), :doc "Deprecated, prefer `get-subvec` or `get-subvector`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(v start-idx [?max-len])], :arglists ([v start-idx & [?max-len]]), :arglists-meta (nil)}}, :name taoensso.encore/subvec*, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(v start-idx [?max-len])], :arglists ([v start-idx & [?max-len]]), :arglists-meta (nil)}, :method-params [(v start-idx [?max-len])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3349, :end-line 3349, :max-fixed-arity 2, :fn-var true, :arglists ([v start-idx & [?max-len]]), :doc "Deprecated, prefer `get-subvec` or `get-subvector`"}, logf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2526, :column 9, :end-line 2526, :end-column 13, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/logf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2526, :end-line 2526, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, reportf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3252, :column 11, :end-line 3252, :end-column 18, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/reportf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3252, :end-line 3252, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, regular-num? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 538, :column 18, :end-line 538, :end-column 30, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/regular-num?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 538, :ret-tag boolean, :end-line 538, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ->LimitHits {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1795, :column 10, :end-line 1795, :end-column 19, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([m worst-sid worst-ms]))}, :protocols #{}, :name taoensso.encore/->LimitHits, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([m worst-sid worst-ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 1795, :end-line 1795, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m worst-sid worst-ms])), :skip-protocol-flag nil}, some? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 471, :column 18, :end-line 471, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/some?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 471, :ret-tag boolean, :end-line 471, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, str-?index {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2021, :column 7, :end-line 2021, :end-column 17, :arglists (quote ([s substr] [s substr start-idx] [s substr start-idx last?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/str-?index, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists-meta (nil nil nil)}, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2021, :end-line 2021, :max-fixed-arity 4, :fn-var true, :arglists ([s substr] [s substr start-idx] [s substr start-idx last?])}, as-?name {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 597, :column 9, :end-line 597, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-?name, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 597, :end-line 597, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, udt? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 570, :column 18, :end-line 570, :end-column 22, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/udt?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 570, :ret-tag boolean, :end-line 570, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-kw {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 665, :column 9, :end-line 665, :end-column 14, :arglists (quote ([x]))}, :name taoensso.encore/as-kw, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 665, :end-line 665, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, fatalf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3251, :column 11, :end-line 3251, :end-column 17, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/fatalf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3251, :end-line 3251, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, neg-num? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 560, :column 18, :end-line 560, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/neg-num?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 560, :ret-tag boolean, :end-line 560, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, distinct-elements? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1111, :column 48, :end-line 1111, :end-column 66, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/distinct-elements?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 66, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1111, :ret-tag boolean, :end-line 1111, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, nneg? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 536, :column 18, :end-line 536, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nneg?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 536, :ret-tag boolean, :end-line 536, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, -assert-unstub-val {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2857, :column 16, :end-line 2857, :end-column 34, :arglists (quote ([f]))}, :name taoensso.encore/-assert-unstub-val, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 34, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 2857, :end-line 2857, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, simple-symbol? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 489, :column 18, :end-line 489, :end-column 32, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/simple-symbol?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 32, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 489, :ret-tag boolean, :end-line 489, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, some= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 933, :column 35, :end-line 933, :end-column 40, :tag boolean, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :name taoensso.encore/some=, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 40, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 933, :ret-tag boolean, :end-line 933, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x y] [x y & more])}, coerce-limit-specs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1798, :column 10, :end-line 1798, :end-column 28, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.encore/coerce-limit-specs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1798, :end-line 1798, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, as-pint {:name taoensso.encore/as-pint, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3148, :column 3, :end-line 3148, :end-column 15, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3148, :column 8, :end-line 3148, :end-column 15}}, force-ref {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 928, :column 7, :end-line 928, :end-column 16, :arglists (quote ([x])), :doc "Like `force` for refs."}, :name taoensso.encore/force-ref, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 928, :end-line 928, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Like `force` for refs."}, as-name {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 666, :column 9, :end-line 666, :end-column 16, :arglists (quote ([x]))}, :name taoensso.encore/as-name, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 666, :end-line 666, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, node-target? {:name taoensso.encore/node-target?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 925, :column 8, :end-line 925, :end-column 25, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 925, :column 13, :end-line 925, :end-column 25}}, conj-when {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1007, :column 9, :end-line 1007, :end-column 18, :arglists (quote ([] [coll] [coll x] [coll x & more])), :doc "Conjoins each truthy value.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & more]), :arglists-meta (nil nil nil nil)}}, :name taoensso.encore/conj-when, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [coll] [coll x]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 3, :line 1007, :end-line 1007, :max-fixed-arity 2, :fn-var true, :arglists ([] [coll] [coll x] [coll x & more]), :doc "Conjoins each truthy value."}, ajax-lite {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2586, :column 7, :end-line 2586, :end-column 16, :arglists (quote ([uri {:keys [method params headers timeout-ms resp-type with-credentials?], :as opts, :or {method :get, timeout-ms 10000, resp-type :auto}} callback-fn])), :doc "Alpha, subject to change. Simple, lightweight Ajax via Google Closure.\n  Returns the resulting XhrIo[1] instance, or nil.\n\n  (ajax-lite \"/my-post-route\"\n    {:method     :post\n     :params     {:username \"Rich Hickey\" :type \"Awesome\"}\n     :headers    {\"Foo\" \"Bar\"}\n     :resp-type  :text\n     :timeout-ms 7000\n     :with-credentials? false ; Enable if using CORS (requires xhr v2+)\n    }\n    (fn async-callback-fn [resp-map]\n      (let [{:keys [success? ?status ?error ?content ?content-type]} resp-map]\n        ;; ?status - e/o #{nil 200 404 ...}, non-nil iff server responded\n        ;; ?error  - e/o #{nil <http-error-status-code> <exception> :timeout\n                           :abort :http-error :exception :xhr-pool-depleted}\n        (js/alert (str \"Ajax response: \" resp-map)))))\n\n  [1] Ref. https://developers.google.com/closure/library/docs/xhrio"}, :name taoensso.encore/ajax-lite, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([uri p__26015 callback-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2586, :end-line 2586, :max-fixed-arity 3, :fn-var true, :arglists (quote ([uri {:keys [method params headers timeout-ms resp-type with-credentials?], :as opts, :or {method :get, timeout-ms 10000, resp-type :auto}} callback-fn])), :doc "Alpha, subject to change. Simple, lightweight Ajax via Google Closure.\n  Returns the resulting XhrIo[1] instance, or nil.\n\n  (ajax-lite \"/my-post-route\"\n    {:method     :post\n     :params     {:username \"Rich Hickey\" :type \"Awesome\"}\n     :headers    {\"Foo\" \"Bar\"}\n     :resp-type  :text\n     :timeout-ms 7000\n     :with-credentials? false ; Enable if using CORS (requires xhr v2+)\n    }\n    (fn async-callback-fn [resp-map]\n      (let [{:keys [success? ?status ?error ?content ?content-type]} resp-map]\n        ;; ?status - e/o #{nil 200 404 ...}, non-nil iff server responded\n        ;; ?error  - e/o #{nil <http-error-status-code> <exception> :timeout\n                           :abort :http-error :exception :xhr-pool-depleted}\n        (js/alert (str \"Ajax response: \" resp-map)))))\n\n  [1] Ref. https://developers.google.com/closure/library/docs/xhrio"}, merge-with {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1289, :column 9, :end-line 1289, :end-column 19, :arglists (quote ([f & maps])), :doc "Like `core/merge-with` but faster, supports `:swap/dissoc` rvals.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}}, :name taoensso.encore/merge-with, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}, :method-params [(f maps)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 1289, :end-line 1289, :max-fixed-arity 1, :fn-var true, :arglists ([f & maps]), :doc "Like `core/merge-with` but faster, supports `:swap/dissoc` rvals."}, as-?nempty-str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 603, :column 9, :end-line 603, :end-column 23, :arglists (quote ([x]))}, :name taoensso.encore/as-?nempty-str, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, distinct-by {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3264, :column 9, :end-line 3264, :end-column 20, :arglists (quote ([keyfn coll])), :doc "Deprecated, prefer `xdistinct`"}, :name taoensso.encore/distinct-by, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([keyfn coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3264, :end-line 3264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keyfn coll])), :doc "Deprecated, prefer `xdistinct`"}, as-uint {:name taoensso.encore/as-uint, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3147, :column 3, :end-line 3147, :end-column 15, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3147, :column 8, :end-line 3147, :end-column 15}}, nvec? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3311, :column 9, :end-line 3311, :end-column 14, :arglists (quote ([n x]))}, :name taoensso.encore/nvec?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([n x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3311, :end-line 3311, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n x]))}, path {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2193, :column 7, :end-line 2193, :end-column 11, :arglists (quote ([& parts])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parts)], :arglists ([& parts]), :arglists-meta (nil)}}, :name taoensso.encore/path, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parts)], :arglists ([& parts]), :arglists-meta (nil)}, :method-params [(parts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2193, :end-line 2193, :max-fixed-arity 0, :fn-var true, :arglists ([& parts])}, as-pos-float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 676, :column 9, :end-line 676, :end-column 21, :arglists (quote ([x]))}, :name taoensso.encore/as-pos-float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 676, :end-line 676, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, contains-in? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1203, :column 42, :end-line 1203, :end-column 54, :tag boolean, :arglists (quote ([coll ks k] [coll ks])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll ks k] [coll ks]), :arglists ([coll ks k] [coll ks]), :arglists-meta (nil nil)}}, :name taoensso.encore/contains-in?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 54, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll ks k] [coll ks]), :arglists ([coll ks k] [coll ks]), :arglists-meta (nil nil)}, :method-params ([coll ks k] [coll ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1203, :ret-tag boolean, :end-line 1203, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists ([coll ks k] [coll ks])}, nil->sentinel {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3356, :column 9, :end-line 3356, :end-column 22, :arglists (quote ([x]))}, :name taoensso.encore/nil->sentinel, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3356, :end-line 3356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, LimitSpec {:num-fields 2, :protocols #{}, :name taoensso.encore/LimitSpec, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :type true, :column 10, :line 1793, :record false, :end-line 1793, :skip-protocol-flag nil}, filter-kvs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3373, :column 9, :end-line 3373, :end-column 19, :arglists (quote ([pred m]))}, :name taoensso.encore/filter-kvs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3373, :end-line 3373, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, reduce-n {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 794, :column 9, :end-line 794, :end-column 17, :arglists (quote ([rf init n]))}, :name taoensso.encore/reduce-n, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([rf init n]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 794, :end-line 794, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rf init n]))}, swap-in! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1475, :column 9, :end-line 1475, :end-column 17, :arglists (quote ([atom_ f] [atom_ ks f] [atom_ ks not-found f])), :doc "Like `swap!` but supports `update-in` semantics,\n    returns <new-key-val> or <swapped-return-val>.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/swap-in!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :arglists-meta (nil nil nil)}, :method-params ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 1475, :end-line 1475, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ f] [atom_ ks f] [atom_ ks not-found f]), :doc "Like `swap!` but supports `update-in` semantics,\n    returns <new-key-val> or <swapped-return-val>."}, get-substring {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2068, :column 7, :end-line 2068, :end-column 20, :arglists (quote ([s start] [s start length])), :doc "Like `get-substr` but:\n    - Takes `length` instead of `end` (index).\n    - -ive `start` => index from right of string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start length]), :arglists ([s start] [s start length]), :arglists-meta (nil nil)}}, :name taoensso.encore/get-substring, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start length]), :arglists ([s start] [s start length]), :arglists-meta (nil nil)}, :method-params ([s start] [s start length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2068, :end-line 2068, :max-fixed-arity 3, :fn-var true, :arglists ([s start] [s start length]), :doc "Like `get-substr` but:\n    - Takes `length` instead of `end` (index).\n    - -ive `start` => index from right of string."}, -core-merge {:name taoensso.encore/-core-merge, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 254, :column 1, :end-line 254, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 254, :column 6, :end-line 254, :end-column 17}}, warnf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3249, :column 11, :end-line 3249, :end-column 16, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/warnf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3249, :end-line 3249, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, memoize* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1633, :column 7, :end-line 1633, :end-column 15, :arglists (quote ([f] [ttl-ms f] [cache-size ttl-ms f])), :doc "Like `core/memoize` but:\n    * Often faster, depending on opts.\n    * Prevents race conditions on writes.\n    * Supports auto invalidation & gc with `ttl-ms` opt.\n    * Supports cache size limit & gc with `cache-size` opt.\n    * Supports invalidation by prepending args with `:mem/del` or `:mem/fresh`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f] [ttl-ms f] [cache-size ttl-ms f]), :arglists ([f] [ttl-ms f] [cache-size ttl-ms f]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/memoize*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f] [ttl-ms f] [cache-size ttl-ms f]), :arglists ([f] [ttl-ms f] [cache-size ttl-ms f]), :arglists-meta (nil nil nil)}, :method-params ([f] [ttl-ms f] [cache-size ttl-ms f]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1633, :end-line 1633, :max-fixed-arity 3, :fn-var true, :arglists ([f] [ttl-ms f] [cache-size ttl-ms f]), :doc "Like `core/memoize` but:\n    * Often faster, depending on opts.\n    * Prevents race conditions on writes.\n    * Supports auto invalidation & gc with `ttl-ms` opt.\n    * Supports cache size limit & gc with `cache-size` opt.\n    * Supports invalidation by prepending args with `:mem/del` or `:mem/fresh`."}, nat-num? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 558, :column 18, :end-line 558, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nat-num?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 558, :ret-tag boolean, :end-line 558, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-?nemail {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 639, :column 9, :end-line 639, :end-column 19, :arglists (quote ([?s]))}, :name taoensso.encore/as-?nemail, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([?s]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 639, :end-line 639, :max-fixed-arity 1, :fn-var true, :arglists (quote ([?s]))}, float? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 544, :column 20, :end-line 544, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/float?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 5, :line 544, :ret-tag boolean, :end-line 544, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-?email {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 638, :column 9, :end-line 638, :end-column 18, :arglists (quote ([?s]))}, :name taoensso.encore/as-?email, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([?s]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 638, :end-line 638, :max-fixed-arity 1, :fn-var true, :arglists (quote ([?s]))}, swap!* {:name taoensso.encore/swap!*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3159, :column 3, :end-line 3159, :end-column 14, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3159, :column 8, :end-line 3159, :end-column 14}}, spaced-str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3184, :column 9, :end-line 3184, :end-column 19, :arglists (quote ([xs]))}, :name taoensso.encore/spaced-str, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3184, :end-line 3184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, sentinel {:name taoensso.encore/sentinel, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3354, :column 3, :end-line 3354, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3354, :column 9, :end-line 3354, :end-column 17}}, merge-deep {:name taoensso.encore/merge-deep, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3125, :column 3, :end-line 3125, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3125, :column 8, :end-line 3125, :end-column 18}}, join-once {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3193, :column 9, :end-line 3193, :end-column 18, :arglists (quote ([sep & coll])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(sep coll)], :arglists ([sep & coll]), :arglists-meta (nil)}}, :name taoensso.encore/join-once, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(sep coll)], :arglists ([sep & coll]), :arglists-meta (nil)}, :method-params [(sep coll)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3193, :end-line 3193, :max-fixed-arity 1, :fn-var true, :arglists ([sep & coll])}, a0-memoize_ {:name taoensso.encore/a0-memoize_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3132, :column 3, :end-line 3132, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3132, :column 8, :end-line 3132, :end-column 19}}, sb-append {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1959, :column 7, :end-line 1959, :end-column 16, :arglists (quote ([str-builder s] [str-builder s & more])), :doc "For cross-platform string building", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([str-builder s]), :arglists ([str-builder s] [str-builder s & more]), :arglists-meta (nil nil)}}, :name taoensso.encore/sb-append, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([str-builder s]), :arglists ([str-builder s] [str-builder s & more]), :arglists-meta (nil nil)}, :method-params ([str-builder s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1959, :end-line 1959, :max-fixed-arity 2, :fn-var true, :arglists ([str-builder s] [str-builder s & more]), :doc "For cross-platform string building"}, console-log {:name taoensso.encore/console-log, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2517, :column 3, :end-line 2517, :end-column 29, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2517, :column 18, :end-line 2517, :end-column 29, :private true}}, as-?nzero {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 594, :column 9, :end-line 594, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-?nzero, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 594, :end-line 594, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, as-?pos-float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 627, :column 9, :end-line 627, :end-column 22, :arglists (quote ([x]))}, :name taoensso.encore/as-?pos-float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 627, :end-line 627, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -new-stubfn_ {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2856, :column 16, :end-line 2856, :end-column 28, :arglists (quote ([name]))}, :name taoensso.encore/-new-stubfn_, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 2856, :end-line 2856, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, oget {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 993, :column 7, :end-line 993, :end-column 11, :arglists (quote ([o k] [o k1 k2] [o k1 k2 & ks])), :doc "Like `aget` for JS objects, Ref. https://goo.gl/eze8hY.\n  Unlike `aget`, returns nil for missing keys instead of throwing.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([o k] [o k1 k2]), :arglists ([o k] [o k1 k2] [o k1 k2 & ks]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/oget, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([o k] [o k1 k2]), :arglists ([o k] [o k1 k2] [o k1 k2 & ks]), :arglists-meta (nil nil nil)}, :method-params ([o k] [o k1 k2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 3, :fn-var true, :arglists ([o k] [o k1 k2] [o k1 k2 & ks]), :doc "Like `aget` for JS objects, Ref. https://goo.gl/eze8hY.\n  Unlike `aget`, returns nil for missing keys instead of throwing."}, swap-val!* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1452, :column 9, :end-line 1452, :end-column 19, :arglists (quote ([atom_ k f] [atom_ k not-found f])), :doc "Low-level util, returns [<old-key-val> <new-key-val>].", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k f] [atom_ k not-found f]), :arglists ([atom_ k f] [atom_ k not-found f]), :arglists-meta (nil nil)}}, :name taoensso.encore/swap-val!*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k f] [atom_ k not-found f]), :arglists ([atom_ k f] [atom_ k not-found f]), :arglists-meta (nil nil)}, :method-params ([atom_ k f] [atom_ k not-found f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1452, :end-line 1452, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ k f] [atom_ k not-found f]), :doc "Low-level util, returns [<old-key-val> <new-key-val>]."}, fsplit-last {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1095, :column 8, :end-line 1095, :end-column 19, :private true, :arglists (quote ([f xs])), :doc "Faster (f (vec (butlast xs)) (last x))."}, :private true, :name taoensso.encore/fsplit-last, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1095, :end-line 1095, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f xs])), :doc "Faster (f (vec (butlast xs)) (last x))."}, tf-cancel! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2999, :column 4, :end-line 2999, :end-column 14, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns true iff the timeout was successfully cancelled (i.e. was previously pending).", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-cancel!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2999, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true iff the timeout was successfully cancelled (i.e. was previously pending)."}, as-qname {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 667, :column 9, :end-line 667, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-qname, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 667, :end-line 667, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, get-window-location {:name taoensso.encore/get-window-location, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3120, :column 10, :end-line 3120, :end-column 34, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3120, :column 15, :end-line 3120, :end-column 34}}, format {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2150, :column 9, :end-line 2150, :end-column 15, :arglists (quote ([fmt & args])), :doc "Like `core/format` but:\n      * Returns \"\" when fmt is nil rather than throwing an NPE.\n      * Formats nil as \"nil\" rather than \"null\".\n      * Provides ClojureScript support via goog.string.format (this has fewer\n        formatting options than Clojure's `format`!).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name taoensso.encore/format, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2150, :end-line 2150, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Like `core/format` but:\n      * Returns \"\" when fmt is nil rather than throwing an NPE.\n      * Formats nil as \"nil\" rather than \"null\".\n      * Provides ClojureScript support via goog.string.format (this has fewer\n        formatting options than Clojure's `format`!)."}, compile-ns-filter {:name taoensso.encore/compile-ns-filter, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2898, :column 1, :end-line 2898, :end-column 23, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2898, :column 6, :end-line 2898, :end-column 23}, :doc "Returns (fn [?ns]) -> truthy."}, as-int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 671, :column 9, :end-line 671, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/as-int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 671, :end-line 671, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, sentinel? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3355, :column 9, :end-line 3355, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/sentinel?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3355, :end-line 3355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, nnil-set {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1110, :column 7, :end-line 1110, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/nnil-set, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1110, :end-line 1110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pval? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 572, :column 18, :end-line 572, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/pval?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 572, :ret-tag boolean, :end-line 572, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, singleton? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3359, :column 11, :end-line 3359, :end-column 21, :arglists (quote ([coll]))}, :name taoensso.encore/singleton?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3359, :end-line 3359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, swapped {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1314, :column 9, :end-line 1314, :end-column 16, :arglists (quote ([new-val return-val]))}, :name taoensso.encore/swapped, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([new-val return-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1314, :end-line 1314, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-val return-val]))}, as-nblank {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 663, :column 9, :end-line 663, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-nblank, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 663, :end-line 663, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, logging-level {:name taoensso.encore/logging-level, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3232, :column 3, :end-line 3232, :end-column 21, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3232, :column 8, :end-line 3232, :end-column 21}}, sub-indexes {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3325, :column 9, :end-line 3325, :end-column 20, :arglists (quote ([x start-idx & {:keys [max-len end-idx]}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x start-idx {:keys [max-len end-idx]})], :arglists ([x start-idx & {:keys [max-len end-idx]}]), :arglists-meta (nil)}}, :name taoensso.encore/sub-indexes, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(x start-idx {:keys [max-len end-idx]})], :arglists ([x start-idx & {:keys [max-len end-idx]}]), :arglists-meta (nil)}, :method-params [(x start-idx {:keys [max-len end-idx]})], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3325, :end-line 3325, :max-fixed-arity 2, :fn-var true, :arglists ([x start-idx & {:keys [max-len end-idx]}])}, -reset-kn! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1426, :column 10, :end-line 1426, :end-column 20, :private true, :arglists (quote ([return atom_ ks not-found v1]))}, :private true, :name taoensso.encore/-reset-kn!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([return atom_ ks not-found v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1426, :end-line 1426, :max-fixed-arity 5, :fn-var true, :arglists (quote ([return atom_ ks not-found v1]))}, js-form-data? {:name taoensso.encore/js-form-data?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2552, :column 3, :end-line 2552, :end-column 31, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2552, :column 18, :end-line 2552, :end-column 31, :private true}}, undefined->nil {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3182, :column 16, :end-line 3182, :end-column 30, :arglists (quote ([x]))}, :name taoensso.encore/undefined->nil, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 3182, :end-line 3182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, memoize-a0_ {:name taoensso.encore/memoize-a0_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3130, :column 3, :end-line 3130, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3130, :column 8, :end-line 3130, :end-column 19}}, now-dt {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1518, :column 10, :end-line 1518, :end-column 16, :arglists (quote ([]))}, :name taoensso.encore/now-dt, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1518, :end-line 1518, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, repeatedly-into {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1128, :column 7, :end-line 1128, :end-column 22, :arglists (quote ([coll n f])), :doc "Like `repeatedly` but faster and `conj`s items into given collection."}, :name taoensso.encore/repeatedly-into, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([coll n f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1128, :end-line 1128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([coll n f])), :doc "Like `repeatedly` but faster and `conj`s items into given collection."}, ->SimpleCacheEntry {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1629, :column 10, :end-line 1629, :end-column 26, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([delay udt]))}, :protocols #{}, :name taoensso.encore/->SimpleCacheEntry, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([delay udt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 1629, :end-line 1629, :max-fixed-arity 2, :fn-var true, :arglists (quote ([delay udt])), :skip-protocol-flag nil}, coerce-xhr-params {:name taoensso.encore/coerce-xhr-params, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2554, :column 3, :end-line 2554, :end-column 35, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2554, :column 18, :end-line 2554, :end-column 35, :private true}, :doc "Returns [<uri> <?data> <mime-type>]"}, pint? {:name taoensso.encore/pint?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3141, :column 3, :end-line 3141, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3141, :column 8, :end-line 3141, :end-column 13}}, tout-result {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2986, :column 10, :end-line 2986, :end-column 21, :private true, :arglists (quote ([result_]))}, :private true, :name taoensso.encore/tout-result, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([result_]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2986, :end-line 2986, :max-fixed-arity 1, :fn-var true, :arglists (quote ([result_]))}, run-obj! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 823, :column 16, :end-line 823, :end-column 24, :arglists (quote ([proc obj]))}, :name taoensso.encore/run-obj!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 24, :method-params ([proc obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 823, :end-line 823, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proc obj]))}, nnil? {:name taoensso.encore/nnil?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3136, :column 3, :end-line 3136, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3136, :column 8, :end-line 3136, :end-column 13}}, memoize_ {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1537, :column 7, :end-line 1537, :end-column 15, :arglists (quote ([f])), :doc "Like `core/memoize` but faster, non-racy, and supports invalidation."}, :name taoensso.encore/memoize_, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1537, :end-line 1537, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Like `core/memoize` but faster, non-racy, and supports invalidation."}, memoize-1 {:name taoensso.encore/memoize-1, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3134, :column 3, :end-line 3134, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3134, :column 8, :end-line 3134, :end-column 17}}, as-?pint {:name taoensso.encore/as-?pint, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3144, :column 3, :end-line 3144, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3144, :column 8, :end-line 3144, :end-column 16}}, str-contains? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2003, :column 43, :end-line 2003, :end-column 56, :tag boolean, :arglists (quote ([s substr]))}, :name taoensso.encore/str-contains?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 56, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2003, :ret-tag boolean, :end-line 2003, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr]))}, swapped? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1313, :column 25, :end-line 1313, :end-column 33, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/swapped?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 33, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 1313, :ret-tag boolean, :end-line 1313, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, default-timeout-impl_ {:name taoensso.encore/default-timeout-impl_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2976, :column 3, :end-line 2976, :end-column 33, :doc "Simple one-timeout timeout implementation provided by platform timer.\n    O(logn) add, O(1) cancel, O(1) tick. Fns must be non-blocking or cheap.\n    Similar efficiency to core.async timers (binary heap vs DelayQueue).", :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2976, :column 12, :end-line 2976, :end-column 33, :doc "Simple one-timeout timeout implementation provided by platform timer.\n    O(logn) add, O(1) cancel, O(1) tick. Fns must be non-blocking or cheap.\n    Similar efficiency to core.async timers (binary heap vs DelayQueue)."}}, filter-vals {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1165, :column 9, :end-line 1165, :end-column 20, :arglists (quote ([pred m]))}, :name taoensso.encore/filter-vals, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1165, :end-line 1165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, ks-nnil? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1173, :column 40, :end-line 1173, :end-column 48, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.encore/ks-nnil?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 48, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1173, :ret-tag boolean, :end-line 1173, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, update-in* {:name taoensso.encore/update-in*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3164, :column 3, :end-line 3164, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3164, :column 8, :end-line 3164, :end-column 18}}, TimeoutFuture {:num-fields 3, :protocols #{taoensso.encore/ITimeoutFuture cljs.core/IPending cljs.core/IDeref}, :name taoensso.encore/TimeoutFuture, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :type true, :column 10, :line 3002, :record false, :end-line 3002, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}}, vnext {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1087, :column 7, :end-line 1087, :end-column 12, :arglists (quote ([v]))}, :name taoensso.encore/vnext, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1087, :end-line 1087, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, as-?nat-float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 626, :column 9, :end-line 626, :end-column 22, :arglists (quote ([x]))}, :name taoensso.encore/as-?nat-float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 626, :end-line 626, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, as-udt {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 670, :column 9, :end-line 670, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/as-udt, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 670, :end-line 670, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, *log-level* {:name taoensso.encore/*log-level*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3241, :column 5, :end-line 3241, :end-column 35, :dynamic true, :doc "DEPRECATED", :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3241, :column 24, :end-line 3241, :end-column 35, :dynamic true, :doc "DEPRECATED"}}, dswap! {:name taoensso.encore/dswap!, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3157, :column 3, :end-line 3157, :end-column 14, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3157, :column 8, :end-line 3157, :end-column 14}}, run!* {:name taoensso.encore/run!*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3151, :column 3, :end-line 3151, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3151, :column 8, :end-line 3151, :end-column 13}}, rfirst-kv {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 829, :column 9, :end-line 829, :end-column 18, :arglists (quote ([pred coll]))}, :name taoensso.encore/rfirst-kv, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 829, :end-line 829, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, takev {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1107, :column 9, :end-line 1107, :end-column 14, :arglists (quote ([n coll]))}, :name taoensso.encore/takev, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1107, :end-line 1107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll]))}, ->TickedCacheEntry {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1630, :column 10, :end-line 1630, :end-column 26, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([delay udt tick-lru tick-lfu]))}, :protocols #{}, :name taoensso.encore/->TickedCacheEntry, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([delay udt tick-lru tick-lfu]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 1630, :end-line 1630, :max-fixed-arity 4, :fn-var true, :arglists (quote ([delay udt tick-lru tick-lfu])), :skip-protocol-flag nil}, count-words {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2201, :column 7, :end-line 2201, :end-column 18, :arglists (quote ([s]))}, :name taoensso.encore/count-words, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2201, :end-line 2201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, remove-kvs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3374, :column 9, :end-line 3374, :end-column 19, :arglists (quote ([pred m]))}, :name taoensso.encore/remove-kvs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3374, :end-line 3374, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, int? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 551, :column 18, :end-line 551, :end-column 22, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/int?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 551, :ret-tag boolean, :end-line 551, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, lazy-seq? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 484, :column 20, :end-line 484, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/lazy-seq?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 484, :ret-tag boolean, :end-line 484, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ms->secs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2287, :column 7, :end-line 2287, :end-column 15, :arglists (quote ([ms]))}, :name taoensso.encore/ms->secs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2287, :end-line 2287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms]))}, as-nat-float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 675, :column 9, :end-line 675, :end-column 21, :arglists (quote ([x]))}, :name taoensso.encore/as-nat-float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 675, :end-line 675, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, run-kv! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 821, :column 16, :end-line 821, :end-column 23, :arglists (quote ([proc m]))}, :name taoensso.encore/run-kv!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([proc m]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 821, :end-line 821, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proc m]))}, mapply {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1115, :column 7, :end-line 1115, :end-column 13, :arglists (quote ([f & args])), :doc "Like `apply` but calls `seq-kvs` on final arg.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name taoensso.encore/mapply, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1115, :end-line 1115, :max-fixed-arity 1, :fn-var true, :arglists ([f & args]), :doc "Like `apply` but calls `seq-kvs` on final arg."}, as-ufloat {:name taoensso.encore/as-ufloat, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3149, :column 3, :end-line 3149, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3149, :column 8, :end-line 3149, :end-column 17}}, rate-limit {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3215, :column 9, :end-line 3215, :end-column 19, :arglists (quote ([specs f]))}, :name taoensso.encore/rate-limit, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([specs f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3215, :end-line 3215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([specs f]))}, error-data {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 384, :column 7, :end-line 384, :end-column 17, :arglists (quote ([x])), :doc "Returns data map iff `x` is an error of any type on platform."}, :name taoensso.encore/error-data, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns data map iff `x` is an error of any type on platform."}, reset-val!? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1465, :column 9, :end-line 1465, :end-column 20, :arglists (quote ([atom_ k new-val])), :doc "Maps value to key and returns true iff the mapped value changed or\n    was created."}, :name taoensso.encore/reset-val!?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([atom_ k new-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1465, :end-line 1465, :max-fixed-arity 3, :fn-var true, :arglists (quote ([atom_ k new-val])), :doc "Maps value to key and returns true iff the mapped value changed or\n    was created."}, js-file? {:name taoensso.encore/js-file?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2553, :column 3, :end-line 2553, :end-column 26, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2553, :column 18, :end-line 2553, :end-column 26, :private true}}, queue {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 977, :column 7, :end-line 977, :end-column 12, :arglists (quote ([coll] [])), :doc "Returns a PersistentQueue.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([coll] []), :arglists ([coll] []), :arglists-meta (nil nil)}}, :name taoensso.encore/queue, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([coll] []), :arglists ([coll] []), :arglists-meta (nil nil)}, :method-params ([coll] []), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 977, :end-line 977, :max-fixed-arity 1, :fn-var true, :arglists ([coll] []), :doc "Returns a PersistentQueue."}, revery-kv {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 833, :column 9, :end-line 833, :end-column 18, :arglists (quote ([pred coll]))}, :name taoensso.encore/revery-kv, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 833, :end-line 833, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, reset-in! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1483, :column 9, :end-line 1483, :end-column 18, :arglists (quote ([atom_ val] [atom_ ks val] [atom_ ks not-found val])), :doc "Like `reset!` but supports `update-in` semantics,\n    returns <old-key-val>.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :arglists ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/reset-in!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :arglists ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :arglists-meta (nil nil nil)}, :method-params ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 1483, :end-line 1483, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ val] [atom_ ks val] [atom_ ks not-found val]), :doc "Like `reset!` but supports `update-in` semantics,\n    returns <old-key-val>."}, nnil {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 939, :column 7, :end-line 939, :end-column 11, :arglists (quote ([] [x] [x y] [x y z] [x y z & more])), :doc "Returns first non-nil arg, or nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([] [x] [x y] [x y z]), :arglists ([] [x] [x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :name taoensso.encore/nnil, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([] [x] [x y] [x y z]), :arglists ([] [x] [x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([] [x] [x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 939, :end-line 939, :max-fixed-arity 3, :fn-var true, :arglists ([] [x] [x y] [x y z] [x y z & more]), :doc "Returns first non-nil arg, or nil."}, format* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2142, :column 9, :end-line 2142, :end-column 16, :arglists (quote ([fmt args]))}, :name taoensso.encore/format*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([fmt args]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2142, :end-line 2142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fmt args]))}, remove-vals {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1167, :column 9, :end-line 1167, :end-column 20, :arglists (quote ([pred m]))}, :name taoensso.encore/remove-vals, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1167, :end-line 1167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, round* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 875, :column 7, :end-line 875, :end-column 13, :arglists (quote ([n] [type n] [type nplaces n])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n] [type n] [type nplaces n]), :arglists ([n] [type n] [type nplaces n]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/round*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n] [type n] [type nplaces n]), :arglists ([n] [type n] [type nplaces n]), :arglists-meta (nil nil nil)}, :method-params ([n] [type n] [type nplaces n]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 875, :end-line 875, :max-fixed-arity 3, :fn-var true, :arglists ([n] [type n] [type nplaces n])}, LimitEntry {:num-fields 2, :protocols #{}, :name taoensso.encore/LimitEntry, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :type true, :column 10, :line 1794, :record false, :end-line 1794, :skip-protocol-flag nil}, pos-num? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 559, :column 18, :end-line 559, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/pos-num?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 559, :ret-tag boolean, :end-line 559, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, top {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2275, :column 9, :end-line 2275, :end-column 12, :arglists (quote ([n coll] [n keyfn coll] [n keyfn cmp coll])), :doc "Returns a sorted vector of the top `n` items from `coll` of N items\n    in O(N.logn) time. For comparison, (take n (sort-by ...)) is O(N.logN).", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([n coll] [n keyfn coll] [n keyfn cmp coll]), :arglists ([n coll] [n keyfn coll] [n keyfn cmp coll]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/top, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([n coll] [n keyfn coll] [n keyfn cmp coll]), :arglists ([n coll] [n keyfn coll] [n keyfn cmp coll]), :arglists-meta (nil nil nil)}, :method-params ([n coll] [n keyfn coll] [n keyfn cmp coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 2275, :end-line 2275, :max-fixed-arity 4, :fn-var true, :arglists ([n coll] [n keyfn coll] [n keyfn cmp coll]), :doc "Returns a sorted vector of the top `n` items from `coll` of N items\n    in O(N.logn) time. For comparison, (take n (sort-by ...)) is O(N.logN)."}, stringy? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 472, :column 18, :end-line 472, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/stringy?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 472, :ret-tag boolean, :end-line 472, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, revery? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 830, :column 9, :end-line 830, :end-column 16, :arglists (quote ([pred coll]))}, :name taoensso.encore/revery?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 830, :end-line 830, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, vec2? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 497, :column 18, :end-line 497, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/vec2?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 497, :ret-tag boolean, :end-line 497, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, approx== {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 854, :column 38, :end-line 854, :end-column 46, :tag boolean, :arglists (quote ([x y] [signf x y])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [signf x y]), :arglists ([x y] [signf x y]), :arglists-meta (nil nil)}}, :name taoensso.encore/approx==, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 46, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [signf x y]), :arglists ([x y] [signf x y]), :arglists-meta (nil nil)}, :method-params ([x y] [signf x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 854, :ret-tag boolean, :end-line 854, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists ([x y] [signf x y])}, fixture-map->fn {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3098, :column 8, :end-line 3098, :end-column 23, :private true, :arglists (quote ([{:keys [before after], :or {before (quote do), after (quote do)}}]))}, :private true, :name taoensso.encore/fixture-map->fn, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([p__26149]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3098, :end-line 3098, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [before after], :or {before (quote do), after (quote do)}}]))}, parse-float {:name taoensso.encore/parse-float, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3128, :column 3, :end-line 3128, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3128, :column 8, :end-line 3128, :end-column 19}}, vsplit-last {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1088, :column 7, :end-line 1088, :end-column 18, :arglists (quote ([v]))}, :name taoensso.encore/vsplit-last, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1088, :end-line 1088, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, LimitHits {:num-fields 3, :protocols #{}, :name taoensso.encore/LimitHits, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :type true, :column 10, :line 1795, :record false, :end-line 1795, :skip-protocol-flag nil}, rsome {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 826, :column 9, :end-line 826, :end-column 14, :arglists (quote ([pred coll]))}, :name taoensso.encore/rsome, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 826, :end-line 826, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, re-pattern? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 485, :column 18, :end-line 485, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/re-pattern?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 485, :ret-tag boolean, :end-line 485, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, nneg-float? {:name taoensso.encore/nneg-float?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3139, :column 3, :end-line 3139, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3139, :column 8, :end-line 3139, :end-column 19}}, indexed? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 476, :column 18, :end-line 476, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/indexed?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 476, :ret-tag boolean, :end-line 476, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-?int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 607, :column 9, :end-line 607, :end-column 16, :arglists (quote ([x]))}, :name taoensso.encore/as-?int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 607, :end-line 607, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -reset-k0! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1357, :column 10, :end-line 1357, :end-column 20, :private true, :arglists (quote ([return atom_ v1]))}, :private true, :name taoensso.encore/-reset-k0!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([return atom_ v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1357, :end-line 1357, :max-fixed-arity 3, :fn-var true, :arglists (quote ([return atom_ v1]))}, ks<= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1171, :column 40, :end-line 1171, :end-column 44, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.encore/ks<=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 44, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1171, :ret-tag boolean, :end-line 1171, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, name-with-attrs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 232, :column 7, :end-line 232, :end-column 22, :arglists (quote ([sym args] [sym args attrs-merge])), :doc "Given a symbol and args, returns [<name-with-attrs-meta> <args>] with\n  support for `defn` style `?docstring` and `?attrs-map`.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym args] [sym args attrs-merge]), :arglists ([sym args] [sym args attrs-merge]), :arglists-meta (nil nil)}}, :name taoensso.encore/name-with-attrs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym args] [sym args attrs-merge]), :arglists ([sym args] [sym args attrs-merge]), :arglists-meta (nil nil)}, :method-params ([sym args] [sym args attrs-merge]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 3, :fn-var true, :arglists ([sym args] [sym args attrs-merge]), :doc "Given a symbol and args, returns [<name-with-attrs-meta> <args>] with\n  support for `defn` style `?docstring` and `?attrs-map`."}, as-pos-int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 673, :column 9, :end-line 673, :end-column 19, :arglists (quote ([x]))}, :name taoensso.encore/as-pos-int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 673, :end-line 673, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pow {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 873, :column 7, :end-line 873, :end-column 10, :arglists (quote ([n exp]))}, :name taoensso.encore/pow, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 10, :method-params ([n exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 873, :end-line 873, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n exp]))}, as-?pfloat {:name taoensso.encore/as-?pfloat, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3146, :column 3, :end-line 3146, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3146, :column 8, :end-line 3146, :end-column 18}}, named? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 477, :column 18, :end-line 477, :end-column 24, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/named?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 477, :ret-tag boolean, :end-line 477, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, exp-backoff {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 906, :column 7, :end-line 906, :end-column 18, :arglists (quote ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}])), :doc "Returns binary exponential backoff value for n<=36.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :arglists ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :arglists-meta (nil nil)}}, :name taoensso.encore/exp-backoff, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :arglists ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :arglists-meta (nil nil)}, :method-params ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 906, :end-line 906, :max-fixed-arity 2, :fn-var true, :arglists ([n-attempt] [n-attempt {:keys [min max factor], :or {factor 1000}}]), :doc "Returns binary exponential backoff value for n<=36."}, swap-val! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1440, :column 9, :end-line 1440, :end-column 18, :arglists (quote ([atom_ k f] [atom_ k not-found f])), :doc "Low-level util, returns <new-key-val> or <swapped-return-val>.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k f] [atom_ k not-found f]), :arglists ([atom_ k f] [atom_ k not-found f]), :arglists-meta (nil nil)}}, :name taoensso.encore/swap-val!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k f] [atom_ k not-found f]), :arglists ([atom_ k f] [atom_ k not-found f]), :arglists-meta (nil nil)}, :method-params ([atom_ k f] [atom_ k not-found f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1440, :end-line 1440, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ k f] [atom_ k not-found f]), :doc "Low-level util, returns <new-key-val> or <swapped-return-val>."}, -tout-cancelled {:name taoensso.encore/-tout-cancelled, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2985, :column 3, :end-line 2985, :end-column 33, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2985, :column 18, :end-line 2985, :end-column 33, :private true}}, as-?uint {:name taoensso.encore/as-?uint, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3143, :column 3, :end-line 3143, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3143, :column 8, :end-line 3143, :end-column 16}}, as-nemail {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 669, :column 9, :end-line 669, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-nemail, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 669, :end-line 669, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, map-keys {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1163, :column 9, :end-line 1163, :end-column 17, :arglists (quote ([f m]))}, :name taoensso.encore/map-keys, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1163, :end-line 1163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, into! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1138, :column 9, :end-line 1138, :end-column 14, :arglists (quote ([to from] [to xform from])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([to from] [to xform from]), :arglists ([to from] [to xform from]), :arglists-meta (nil nil)}}, :name taoensso.encore/into!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([to from] [to xform from]), :arglists ([to from] [to xform from]), :arglists-meta (nil nil)}, :method-params ([to from] [to xform from]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1138, :end-line 1138, :max-fixed-arity 3, :fn-var true, :arglists ([to from] [to xform from])}, substr {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3341, :column 9, :end-line 3341, :end-column 15, :arglists (quote ([s start-idx & [?max-len]])), :doc "Deprecated, prefer `get-substr` or `get-substring`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s start-idx [?max-len])], :arglists ([s start-idx & [?max-len]]), :arglists-meta (nil)}}, :name taoensso.encore/substr, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s start-idx [?max-len])], :arglists ([s start-idx & [?max-len]]), :arglists-meta (nil)}, :method-params [(s start-idx [?max-len])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3341, :end-line 3341, :max-fixed-arity 2, :fn-var true, :arglists ([s start-idx & [?max-len]]), :doc "Deprecated, prefer `get-substr` or `get-substring`"}, simple-keyword? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 491, :column 18, :end-line 491, :end-column 33, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/simple-keyword?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 33, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 491, :ret-tag boolean, :end-line 491, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, editable? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 478, :column 18, :end-line 478, :end-column 27, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/editable?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 478, :ret-tag boolean, :end-line 478, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, conj-some {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1001, :column 9, :end-line 1001, :end-column 18, :arglists (quote ([] [coll] [coll x] [coll x & more])), :doc "Conjoins each non-nil value.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & more]), :arglists-meta (nil nil nil nil)}}, :name taoensso.encore/conj-some, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [coll] [coll x]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 3, :line 1001, :end-line 1001, :max-fixed-arity 2, :fn-var true, :arglists ([] [coll] [coll x] [coll x & more]), :doc "Conjoins each non-nil value."}, into-all {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1120, :column 7, :end-line 1120, :end-column 15, :arglists (quote ([to from] [to from & more])), :doc "Like `into` but supports multiple \"from\"s.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([to from]), :arglists ([to from] [to from & more]), :arglists-meta (nil nil)}}, :name taoensso.encore/into-all, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([to from]), :arglists ([to from] [to from & more]), :arglists-meta (nil nil)}, :method-params ([to from]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1120, :end-line 1120, :max-fixed-arity 2, :fn-var true, :arglists ([to from] [to from & more]), :doc "Like `into` but supports multiple \"from\"s."}, idx-fn {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 844, :column 7, :end-line 844, :end-column 13, :arglists (quote ([])), :doc "Returns a new stateful index fn that returns: 0, 1, 2, ..."}, :name taoensso.encore/idx-fn, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 844, :end-line 844, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a new stateful index fn that returns: 0, 1, 2, ..."}, neg-int? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 564, :column 18, :end-line 564, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/neg-int?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 564, :ret-tag boolean, :end-line 564, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, secs {:name taoensso.encore/secs, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2304, :column 1, :end-line 2304, :end-column 10, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2304, :column 6, :end-line 2304, :end-column 10}}, nil->str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2138, :column 9, :end-line 2138, :end-column 17, :arglists (quote ([x])), :doc "nil/undefined -> \"nil\""}, :name taoensso.encore/nil->str, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2138, :end-line 2138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "nil/undefined -> \"nil\""}, -swap-k0! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1345, :column 10, :end-line 1345, :end-column 19, :private true, :arglists (quote ([return atom_ f]))}, :private true, :name taoensso.encore/-swap-k0!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([return atom_ f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1345, :end-line 1345, :max-fixed-arity 3, :fn-var true, :arglists (quote ([return atom_ f]))}, interleave-all {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1220, :column 7, :end-line 1220, :end-column 21, :arglists (quote ([] [c1] [c1 c2] [c1 c2 & colls])), :doc "Greedy version of `interleave`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [c1] [c1 c2]), :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil nil nil)}}, :name taoensso.encore/interleave-all, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [c1] [c1 c2]), :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil nil nil)}, :method-params ([] [c1] [c1 c2]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1220, :end-line 1220, :max-fixed-arity 2, :fn-var true, :arglists ([] [c1] [c1 c2] [c1 c2 & colls]), :doc "Greedy version of `interleave`."}, round0 {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 902, :column 9, :end-line 902, :end-column 15, :arglists (quote ([n]))}, :name taoensso.encore/round0, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 902, :end-line 902, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, when? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 644, :column 35, :end-line 644, :end-column 40, :tag boolean, :arglists (quote ([pred x]))}, :name taoensso.encore/when?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 40, :method-params ([pred x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 644, :ret-tag boolean, :end-line 644, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([pred x]))}, ?subvec<len {:name taoensso.encore/?subvec<len, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3154, :column 3, :end-line 3154, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3154, :column 8, :end-line 3154, :end-column 19}}, -reset-k1! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1388, :column 10, :end-line 1388, :end-column 20, :private true, :arglists (quote ([return atom_ k not-found v1]))}, :private true, :name taoensso.encore/-reset-k1!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([return atom_ k not-found v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1388, :end-line 1388, :max-fixed-arity 5, :fn-var true, :arglists (quote ([return atom_ k not-found v1]))}, remove-keys {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1166, :column 9, :end-line 1166, :end-column 20, :arglists (quote ([pred m]))}, :name taoensso.encore/remove-keys, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1166, :end-line 1166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, neg-float? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 568, :column 18, :end-line 568, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/neg-float?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 568, :ret-tag boolean, :end-line 568, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, approx= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3188, :column 9, :end-line 3188, :end-column 16, :arglists (quote ([x y] [x y signf])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y signf]), :arglists ([x y] [x y signf]), :arglists-meta (nil nil)}}, :name taoensso.encore/approx=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y signf]), :arglists ([x y] [x y signf]), :arglists-meta (nil nil)}, :method-params ([x y] [x y signf]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3188, :end-line 3188, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y signf])}, as-?ufloat {:name taoensso.encore/as-?ufloat, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3145, :column 3, :end-line 3145, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3145, :column 8, :end-line 3145, :end-column 18}}, merge-url-with-query-string {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2837, :column 7, :end-line 2837, :end-column 34, :arglists (quote ([url m]))}, :name taoensso.encore/merge-url-with-query-string, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 34, :method-params ([url m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2837, :end-line 2837, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url m]))}, update-in {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1182, :column 7, :end-line 1182, :end-column 16, :arglists (quote ([m ks f] [m ks not-found f])), :doc "Like `core/update-in` but resolves an ambiguity with empty `ks`,\n  adds support for `not-found`, `:swap/dissoc` vals.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m ks f] [m ks not-found f]), :arglists ([m ks f] [m ks not-found f]), :arglists-meta (nil nil)}}, :name taoensso.encore/update-in, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([m ks f] [m ks not-found f]), :arglists ([m ks f] [m ks not-found f]), :arglists-meta (nil nil)}, :method-params ([m ks f] [m ks not-found f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1182, :end-line 1182, :max-fixed-arity 4, :fn-var true, :arglists ([m ks f] [m ks not-found f]), :doc "Like `core/update-in` but resolves an ambiguity with empty `ks`,\n  adds support for `not-found`, `:swap/dissoc` vals."}, reduce-obj {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 815, :column 7, :end-line 815, :end-column 17, :arglists (quote ([f init o])), :doc "Like `reduce-kv` but for JavaScript objects."}, :name taoensso.encore/reduce-obj, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([f init o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 815, :end-line 815, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init o])), :doc "Like `reduce-kv` but for JavaScript objects."}, str-builder {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1953, :column 6, :end-line 1953, :end-column 17}, :name taoensso.encore/str-builder, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([] [s-init]), :protocol-impl nil, :arglists-meta (), :column 1, :line 1953, :end-line 1953, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "For cross-platform string building"}, kw-identical? {:name taoensso.encore/kw-identical?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 586, :column 10, :end-line 586, :end-column 37, :tag boolean, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 586, :column 24, :end-line 586, :end-column 37, :tag boolean}}, run! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 820, :column 16, :end-line 820, :end-column 20, :arglists (quote ([proc coll]))}, :name taoensso.encore/run!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([proc coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 820, :end-line 820, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proc coll]))}, assoc-conj {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2808, :column 8, :end-line 2808, :end-column 18, :private true, :arglists (quote ([m k v]))}, :private true, :name taoensso.encore/assoc-conj, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2808, :end-line 2808, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, swapped* {:name taoensso.encore/swapped*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3129, :column 3, :end-line 3129, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3129, :column 8, :end-line 3129, :end-column 16}}, js-?win {:name taoensso.encore/js-?win, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 926, :column 8, :end-line 926, :end-column 20, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 926, :column 13, :end-line 926, :end-column 20}}, url-encode {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2766, :column 7, :end-line 2766, :end-column 17, :arglists (quote ([s])), :doc "Stolen from http://goo.gl/99NSR1"}, :name taoensso.encore/url-encode, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2766, :end-line 2766, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Stolen from http://goo.gl/99NSR1"}, qname {:name taoensso.encore/qname, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3123, :column 3, :end-line 3123, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3123, :column 8, :end-line 3123, :end-column 13}}, fzipmap {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3363, :column 9, :end-line 3363, :end-column 16, :arglists (quote ([ks vs]))}, :name taoensso.encore/fzipmap, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([ks vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3363, :end-line 3363, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks vs]))}, -tout-pending {:name taoensso.encore/-tout-pending, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2984, :column 3, :end-line 2984, :end-column 31, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2984, :column 18, :end-line 2984, :end-column 31, :private true}}, fq-name {:name taoensso.encore/fq-name, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3122, :column 3, :end-line 3122, :end-column 15, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3122, :column 8, :end-line 3122, :end-column 15}}, ident? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 473, :column 18, :end-line 473, :end-column 24, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/ident?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 473, :ret-tag boolean, :end-line 473, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, keys>= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3203, :column 9, :end-line 3203, :end-column 15, :arglists (quote ([m ks]))}, :name taoensso.encore/keys>=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3203, :end-line 3203, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks]))}, distinctv {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3277, :column 9, :end-line 3277, :end-column 18, :arglists (quote ([coll] [keyfn coll])), :doc "Deprecated, prefer `xdistinct`", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [keyfn coll]), :arglists ([coll] [keyfn coll]), :arglists-meta (nil nil)}}, :name taoensso.encore/distinctv, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [keyfn coll]), :arglists ([coll] [keyfn coll]), :arglists-meta (nil nil)}, :method-params ([coll] [keyfn coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3277, :end-line 3277, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [keyfn coll]), :doc "Deprecated, prefer `xdistinct`"}, filter-keys {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1164, :column 9, :end-line 1164, :end-column 20, :arglists (quote ([pred m]))}, :name taoensso.encore/filter-keys, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([pred m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1164, :end-line 1164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred m]))}, str-rf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1968, :column 6, :end-line 1968, :end-column 12}, :name taoensso.encore/str-rf, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :method-params ([] [acc] [acc in]), :protocol-impl nil, :arglists-meta (), :column 1, :line 1968, :end-line 1968, :max-fixed-arity 2, :fn-var true, :arglists nil, :doc "String builder reducing fn"}, run-kvs! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 822, :column 16, :end-line 822, :end-column 24, :arglists (quote ([proc kvs]))}, :name taoensso.encore/run-kvs!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 24, :method-params ([proc kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 822, :end-line 822, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proc kvs]))}, queue? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 976, :column 23, :end-line 976, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/queue?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 976, :ret-tag boolean, :end-line 976, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, qualified-ident? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 488, :column 18, :end-line 488, :end-column 34, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/qualified-ident?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 34, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 488, :ret-tag boolean, :end-line 488, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, debugf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3247, :column 11, :end-line 3247, :end-column 17, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/debugf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3247, :end-line 3247, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, get-dynamic-assertion-data {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 102, :column 9, :end-line 102, :end-column 35, :arglists (quote ([]))}, :name taoensso.encore/get-dynamic-assertion-data, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 35, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ?subvec<idx {:name taoensso.encore/?subvec<idx, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3153, :column 3, :end-line 3153, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3153, :column 8, :end-line 3153, :end-column 19}}, as-?udt {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 623, :column 9, :end-line 623, :end-column 16, :arglists (quote ([x]))}, :name taoensso.encore/as-?udt, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 623, :end-line 623, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, get-pooled-xhr! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2547, :column 10, :end-line 2547, :end-column 25, :private true, :arglists (quote ([])), :doc "Returns an immediately available XhrIo instance, or nil. The instance must\n    be released back to pool manually."}, :private true, :name taoensso.encore/get-pooled-xhr!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2547, :end-line 2547, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns an immediately available XhrIo instance, or nil. The instance must\n    be released back to pool manually."}, pr-edn {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 368, :column 7, :end-line 368, :end-column 13, :arglists (quote ([x] [_opts x])), :doc "Prints arg to an edn string readable with `read-edn`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [_opts x]), :arglists ([x] [_opts x]), :arglists-meta (nil nil)}}, :name taoensso.encore/pr-edn, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [_opts x]), :arglists ([x] [_opts x]), :arglists-meta (nil nil)}, :method-params ([x] [_opts x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists ([x] [_opts x]), :doc "Prints arg to an edn string readable with `read-edn`."}, ks= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1170, :column 40, :end-line 1170, :end-column 43, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.encore/ks=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 43, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1170, :ret-tag boolean, :end-line 1170, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, nnil= {:name taoensso.encore/nnil=, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3142, :column 3, :end-line 3142, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3142, :column 8, :end-line 3142, :end-column 13}}, top-into {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2253, :column 9, :end-line 2253, :end-column 17, :arglists (quote ([to n coll] [to n keyfn coll] [to n keyfn cmp coll])), :doc "Conjoins the top `n` items from `coll` of N items into `to` in\n    O(N.logn) time. For comparsion, (take n (sort-by ...)) is O(N.logN).", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :arglists ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/top-into, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :arglists ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :arglists-meta (nil nil nil)}, :method-params ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 2253, :end-line 2253, :max-fixed-arity 5, :fn-var true, :arglists ([to n coll] [to n keyfn coll] [to n keyfn cmp coll]), :doc "Conjoins the top `n` items from `coll` of N items into `to` in\n    O(N.logn) time. For comparsion, (take n (sort-by ...)) is O(N.logN)."}, tracef {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3246, :column 11, :end-line 3246, :end-column 17, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/tracef, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3246, :end-line 3246, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, xhr-pool_ {:name taoensso.encore/xhr-pool_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 2546, :column 3, :end-line 2546, :end-column 27, :private true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2546, :column 18, :end-line 2546, :end-column 27, :private true}}, get-subvec {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1028, :column 7, :end-line 1028, :end-column 17, :arglists (quote ([v start] [v start end])), :doc "Like `subvec` but never throws (snaps to valid start and end indexes).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}}, :name taoensso.encore/get-subvec, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}, :method-params ([v start] [v start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1028, :end-line 1028, :max-fixed-arity 3, :fn-var true, :arglists ([v start] [v start end]), :doc "Like `subvec` but never throws (snaps to valid start and end indexes)."}, -schedule-timeout {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2967, :column 32, :end-line 2967, :end-column 49, :protocol taoensso.encore/ITimeoutImpl, :doc nil, :arglists (quote ([_ msecs f]))}, :protocol taoensso.encore/ITimeoutImpl, :name taoensso.encore/-schedule-timeout, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 49, :method-params ([_ msecs f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2967, :end-line 2967, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ msecs f])), :doc nil}, nat-float? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 566, :column 18, :end-line 566, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nat-float?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 566, :ret-tag boolean, :end-line 566, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, -merge-with {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1257, :column 9, :end-line 1257, :end-column 20, :arglists (quote ([nest? f maps]))}, :name taoensso.encore/-merge-with, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([nest? f maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1257, :end-line 1257, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nest? f maps]))}, into-str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2225, :column 7, :end-line 2225, :end-column 15, :arglists (quote ([& xs])), :doc "Simple Hiccup-like string templating to complement Tempura.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.encore/into-str, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2225, :end-line 2225, :max-fixed-arity 0, :fn-var true, :arglists ([& xs]), :doc "Simple Hiccup-like string templating to complement Tempura."}, rate-limiter* {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3206, :column 9, :end-line 3206, :end-column 22, :arglists (quote ([specs])), :doc "Deprecated, prefer `limiter`"}, :name taoensso.encore/rate-limiter*, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3206, :end-line 3206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs])), :doc "Deprecated, prefer `limiter`"}, preserve-reduced {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 775, :column 7, :end-line 775, :end-column 23, :arglists (quote ([rf])), :doc "As `core/preserving-reduced`."}, :name taoensso.encore/preserve-reduced, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 775, :end-line 775, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rf])), :doc "As `core/preserving-reduced`."}, -swap-val! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1333, :column 7, :end-line 1333, :end-column 17, :arglists (quote ([atom_ k f])), :doc "Used internally by memoization utils."}, :name taoensso.encore/-swap-val!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([atom_ k f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1333, :end-line 1333, :max-fixed-arity 3, :fn-var true, :arglists (quote ([atom_ k f])), :doc "Used internally by memoization utils."}, as-float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 674, :column 9, :end-line 674, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 674, :end-line 674, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, limiter {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1926, :column 7, :end-line 1926, :end-column 14, :arglists (quote ([specs])), :doc "Takes {<spec-id> [<n-max-reqs> <msecs-window>]}, and returns a rate\n  limiter (fn check-limits! [req-id]) -> nil (all limits pass), or\n  [<worst-spec-id> <worst-backoff-msecs> {<spec-id> <backoff-msecs>}].\n\n  Limiter fn commands:\n    :rl/peek  <req-id> - Check limits w/o side effects.\n    :rl/reset <req-id> - Reset all limits for given req-id."}, :name taoensso.encore/limiter, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1926, :end-line 1926, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs])), :doc "Takes {<spec-id> [<n-max-reqs> <msecs-window>]}, and returns a rate\n  limiter (fn check-limits! [req-id]) -> nil (all limits pass), or\n  [<worst-spec-id> <worst-backoff-msecs> {<spec-id> <backoff-msecs>}].\n\n  Limiter fn commands:\n    :rl/peek  <req-id> - Check limits w/o side effects.\n    :rl/reset <req-id> - Reset all limits for given req-id."}, infof {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3248, :column 11, :end-line 3248, :end-column 16, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/infof, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3248, :end-line 3248, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, -swap-k! {:name taoensso.encore/-swap-k!, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3163, :column 3, :end-line 3163, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3163, :column 8, :end-line 3163, :end-column 16}}, nneg-num? {:name taoensso.encore/nneg-num?, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3137, :column 3, :end-line 3137, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3137, :column 8, :end-line 3137, :end-column 17}}, merge {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1286, :column 9, :end-line 1286, :end-column 14, :arglists (quote ([& maps])), :doc "Like `core/merge` but faster, supports `:swap/dissoc` rvals.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name taoensso.encore/merge, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 1286, :end-line 1286, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like `core/merge` but faster, supports `:swap/dissoc` rvals."}, -core-update-in {:name taoensso.encore/-core-update-in, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 255, :column 1, :end-line 255, :end-column 21, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 255, :column 6, :end-line 255, :end-column 21}}, zero-num? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 537, :column 18, :end-line 537, :end-column 27, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/zero-num?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 537, :ret-tag boolean, :end-line 537, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, secs->ms {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2286, :column 7, :end-line 2286, :end-column 15, :arglists (quote ([secs]))}, :name taoensso.encore/secs->ms, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([secs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2286, :end-line 2286, :max-fixed-arity 1, :fn-var true, :arglists (quote ([secs]))}, ?substr<len {:name taoensso.encore/?substr<len, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3156, :column 3, :end-line 3156, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3156, :column 8, :end-line 3156, :end-column 19}}, read-edn {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 325, :column 7, :end-line 325, :end-column 15, :arglists (quote ([s] [opts s])), :doc "Attempts to pave over differences in:\n    `clojure.edn/read-string`, `clojure.tools.edn/read-string`,\n    `cljs.reader/read-string`, `cljs.tools.reader/read-string`.\n   `cljs.reader` in particular can be a pain.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}}, :name taoensso.encore/read-edn, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}, :method-params ([s] [opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 2, :fn-var true, :arglists ([s] [opts s]), :doc "Attempts to pave over differences in:\n    `clojure.edn/read-string`, `clojure.tools.edn/read-string`,\n    `cljs.reader/read-string`, `cljs.tools.reader/read-string`.\n   `cljs.reader` in particular can be a pain."}, ITimeoutFuture {:meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2993, :column 14, :end-line 2993, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {tf-state [[_]], tf-poll [[_]], tf-done? [[_]], tf-pending? [[_]], tf-cancelled? [[_]], tf-cancel! [[_]]}}}, :protocol-symbol true, :name taoensso.encore/ITimeoutFuture, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :column 1, :line 2993, :protocol-info {:methods {tf-state [[_]], tf-poll [[_]], tf-done? [[_]], tf-pending? [[_]], tf-cancelled? [[_]], tf-cancel! [[_]]}}, :info nil, :end-line 2993, :impls #{taoensso.encore/TimeoutFuture}, :doc nil, :jsdoc ("@interface")}, str-starts-with? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2008, :column 46, :end-line 2008, :end-column 62, :tag boolean, :arglists (quote ([s substr]))}, :name taoensso.encore/str-starts-with?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 62, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2008, :ret-tag boolean, :end-line 2008, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr]))}, parse-version {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 951, :column 7, :end-line 951, :end-column 20, :arglists (quote ([x]))}, :name taoensso.encore/parse-version, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 951, :end-line 951, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->LimitSpec {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1793, :column 10, :end-line 1793, :end-column 19, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([n ms]))}, :protocols #{}, :name taoensso.encore/->LimitSpec, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([n ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 1793, :end-line 1793, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n ms])), :skip-protocol-flag nil}, round {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3187, :column 9, :end-line 3187, :end-column 14, :arglists (quote ([n & [type nplaces]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(n [type nplaces])], :arglists ([n & [type nplaces]]), :arglists-meta (nil)}}, :name taoensso.encore/round, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(n [type nplaces])], :arglists ([n & [type nplaces]]), :arglists-meta (nil)}, :method-params [(n [type nplaces])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3187, :end-line 3187, :max-fixed-arity 1, :fn-var true, :arglists ([n & [type nplaces]])}, nempty-str? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 494, :column 18, :end-line 494, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nempty-str?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 494, :ret-tag boolean, :end-line 494, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ->Swapped {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1311, :column 12, :end-line 1311, :end-column 19, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([newv returnv]))}, :protocols #{}, :name taoensso.encore/->Swapped, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([newv returnv]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :factory :positional, :line 1311, :end-line 1311, :max-fixed-arity 2, :fn-var true, :arglists (quote ([newv returnv])), :skip-protocol-flag nil}, ->TimeoutFuture {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3002, :column 10, :end-line 3002, :end-column 23, :protocols #{taoensso.encore/ITimeoutFuture cljs.core/IPending cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :factory :positional, :arglists (quote ([f result__ udt]))}, :protocols #{taoensso.encore/ITimeoutFuture cljs.core/IPending cljs.core/IDeref}, :name taoensso.encore/->TimeoutFuture, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([f result__ udt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 3002, :end-line 3002, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f result__ udt])), :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}}, tf-poll {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2995, :column 4, :end-line 2995, :end-column 11, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns :timeout/pending, :timeout/cancelled, or the timeout's completed result.", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-poll, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 11, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2995, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns :timeout/pending, :timeout/cancelled, or the timeout's completed result."}, rate-limiter {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3223, :column 9, :end-line 3223, :end-column 21, :arglists (quote ([ncalls-limit window-ms]))}, :name taoensso.encore/rate-limiter, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 21, :method-params ([ncalls-limit window-ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3223, :end-line 3223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ncalls-limit window-ms]))}, nat-int? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 562, :column 18, :end-line 562, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nat-int?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 562, :ret-tag boolean, :end-line 562, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, min-long {:name taoensso.encore/min-long, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 852, :column 1, :end-line 852, :end-column 22, :const true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 852, :column 14, :end-line 852, :end-column 22, :const true}}, now-nano {:name taoensso.encore/now-nano, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 1523, :column 3, :end-line 1523, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1523, :column 8, :end-line 1523, :end-column 16}, :doc "Uses window context as epoch, Ref. http://goo.gl/mWZWnR"}, -swap-kn! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1396, :column 10, :end-line 1396, :end-column 19, :private true, :arglists (quote ([return atom_ ks not-found f]))}, :private true, :name taoensso.encore/-swap-kn!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([return atom_ ks not-found f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1396, :end-line 1396, :max-fixed-arity 5, :fn-var true, :arglists (quote ([return atom_ ks not-found f]))}, as-nempty-str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 664, :column 9, :end-line 664, :end-column 22, :arglists (quote ([x]))}, :name taoensso.encore/as-nempty-str, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 664, :end-line 664, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, memoize-last {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1608, :column 7, :end-line 1608, :end-column 19, :arglists (quote ([f])), :doc "Like `memoize` but only caches the fn's most recent call.\n  Great for Reactjs render op caching on mobile devices, etc."}, :name taoensso.encore/memoize-last, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1608, :end-line 1608, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Like `memoize` but only caches the fn's most recent call.\n  Great for Reactjs render op caching on mobile devices, etc."}, rsome-kv {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 827, :column 9, :end-line 827, :end-column 17, :arglists (quote ([pred coll]))}, :name taoensso.encore/rsome-kv, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 827, :end-line 827, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, sayf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2527, :column 9, :end-line 2527, :end-column 13, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/sayf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2527, :end-line 2527, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, tf-done? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2996, :column 4, :end-line 2996, :end-column 12, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns true iff the timeout is not pending (i.e. has a completed result or is cancelled).", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-done?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2996, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true iff the timeout is not pending (i.e. has a completed result or is cancelled)."}, a1-memoize_ {:name taoensso.encore/a1-memoize_, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3133, :column 3, :end-line 3133, :end-column 19, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3133, :column 8, :end-line 3133, :end-column 19}}, least {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3258, :column 9, :end-line 3258, :end-column 14, :arglists (quote ([coll & [?comparator]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}}, :name taoensso.encore/least, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}, :method-params [(coll [?comparator])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3258, :end-line 3258, :max-fixed-arity 1, :fn-var true, :arglists ([coll & [?comparator]])}, try-pred {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 643, :column 8, :end-line 643, :end-column 16, :private true, :arglists (quote ([pred x]))}, :private true, :name taoensso.encore/try-pred, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([pred x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 643, :end-line 643, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred x]))}, nblank-str? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 495, :column 18, :end-line 495, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nblank-str?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 495, :ret-tag boolean, :end-line 495, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-pval {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 677, :column 9, :end-line 677, :end-column 16, :arglists (quote ([x]))}, :name taoensso.encore/as-pval, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 677, :end-line 677, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, derefable? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 479, :column 18, :end-line 479, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/derefable?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 479, :ret-tag boolean, :end-line 479, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, uuid-str {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2204, :column 7, :end-line 2204, :end-column 15, :arglists (quote ([max-length] [])), :doc "Returns a UUIDv4 string of form \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".\n  Ref. http://www.ietf.org/rfc/rfc4122.txt,\n       https://gist.github.com/franks42/4159427", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([max-length] []), :arglists ([max-length] []), :arglists-meta (nil nil)}}, :name taoensso.encore/uuid-str, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([max-length] []), :arglists ([max-length] []), :arglists-meta (nil nil)}, :method-params ([max-length] []), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2204, :end-line 2204, :max-fixed-arity 1, :fn-var true, :arglists ([max-length] []), :doc "Returns a UUIDv4 string of form \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".\n  Ref. http://www.ietf.org/rfc/rfc4122.txt,\n       https://gist.github.com/franks42/4159427"}, revery {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 832, :column 9, :end-line 832, :end-column 15, :arglists (quote ([pred coll]))}, :name taoensso.encore/revery, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 832, :end-line 832, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, translate-signed-idx {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3318, :column 10, :end-line 3318, :end-column 30, :private true, :arglists (quote ([signed-idx max-idx]))}, :private true, :name taoensso.encore/translate-signed-idx, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :method-params ([signed-idx max-idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3318, :end-line 3318, :max-fixed-arity 2, :fn-var true, :arglists (quote ([signed-idx max-idx]))}, as-?pval {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 628, :column 9, :end-line 628, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-?pval, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pos-int? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 563, :column 18, :end-line 563, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/pos-int?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 563, :ret-tag boolean, :end-line 563, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-nat-int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 672, :column 9, :end-line 672, :end-column 19, :arglists (quote ([x]))}, :name taoensso.encore/as-nat-int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 672, :end-line 672, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, nblank? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 496, :column 18, :end-line 496, :end-column 25, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nblank?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 496, :ret-tag boolean, :end-line 496, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, set-exp-backoff-timeout! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3235, :column 9, :end-line 3235, :end-column 33, :arglists (quote ([nullary-f & [nattempt]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(nullary-f [nattempt])], :arglists ([nullary-f & [nattempt]]), :arglists-meta (nil)}}, :name taoensso.encore/set-exp-backoff-timeout!, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(nullary-f [nattempt])], :arglists ([nullary-f & [nattempt]]), :arglists-meta (nil)}, :method-params [(nullary-f [nattempt])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3235, :end-line 3235, :max-fixed-arity 1, :fn-var true, :arglists ([nullary-f & [nattempt]])}, SimpleCacheEntry {:num-fields 2, :protocols #{}, :name taoensso.encore/SimpleCacheEntry, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :type true, :column 10, :line 1629, :record false, :end-line 1629, :skip-protocol-flag nil}, call-after-timeout {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3044, :column 7, :end-line 3044, :end-column 25, :arglists (quote ([msecs f] [impl_ msecs f])), :doc "Alpha, subject to change.\n  Returns a TimeoutFuture that will execute `f` after given msecs.\n\n  Does NOT do any automatic binding conveyance.\n\n  Performance depends on the provided timer implementation (`impl_`).\n  The default implementation offers O(logn) add, O(1) cancel, O(1) tick.\n\n  See `ITimeoutImpl` for extending to arbitrary timer implementations.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([msecs f] [impl_ msecs f]), :arglists ([msecs f] [impl_ msecs f]), :arglists-meta (nil nil)}}, :name taoensso.encore/call-after-timeout, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([msecs f] [impl_ msecs f]), :arglists ([msecs f] [impl_ msecs f]), :arglists-meta (nil nil)}, :method-params ([msecs f] [impl_ msecs f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3044, :end-line 3044, :max-fixed-arity 3, :fn-var true, :arglists ([msecs f] [impl_ msecs f]), :doc "Alpha, subject to change.\n  Returns a TimeoutFuture that will execute `f` after given msecs.\n\n  Does NOT do any automatic binding conveyance.\n\n  Performance depends on the provided timer implementation (`impl_`).\n  The default implementation offers O(logn) add, O(1) cancel, O(1) tick.\n\n  See `ITimeoutImpl` for extending to arbitrary timer implementations."}, as-?bool {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 630, :column 9, :end-line 630, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-?bool, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 630, :end-line 630, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pos-float? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 567, :column 18, :end-line 567, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/pos-float?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 567, :ret-tag boolean, :end-line 567, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, seq-kvs {:name taoensso.encore/seq-kvs, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 1114, :column 1, :end-line 1114, :end-column 13, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1114, :column 6, :end-line 1114, :end-column 13}, :doc "(seq-kvs {:a :A}) => (:a :A)."}, vsplit-first {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1089, :column 7, :end-line 1089, :end-column 19, :arglists (quote ([v]))}, :name taoensso.encore/vsplit-first, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1089, :end-line 1089, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, abs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 874, :column 7, :end-line 874, :end-column 10, :arglists (quote ([n]))}, :name taoensso.encore/abs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 874, :end-line 874, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, map-kvs {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3289, :column 9, :end-line 3289, :end-column 16, :arglists (quote ([kf vf m])), :doc "Deprecated, prefer `reduce-kv`"}, :name taoensso.encore/map-kvs, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([kf vf m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3289, :end-line 3289, :max-fixed-arity 3, :fn-var true, :arglists (quote ([kf vf m])), :doc "Deprecated, prefer `reduce-kv`"}, reset-val! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1446, :column 9, :end-line 1446, :end-column 19, :arglists (quote ([atom_ k val] [atom_ k not-found val])), :doc "Low-level util, returns <old-key-val>.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k val] [atom_ k not-found val]), :arglists ([atom_ k val] [atom_ k not-found val]), :arglists-meta (nil nil)}}, :name taoensso.encore/reset-val!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([atom_ k val] [atom_ k not-found val]), :arglists ([atom_ k val] [atom_ k not-found val]), :arglists-meta (nil nil)}, :method-params ([atom_ k val] [atom_ k not-found val]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1446, :end-line 1446, :max-fixed-arity 4, :fn-var true, :arglists ([atom_ k val] [atom_ k not-found val]), :doc "Low-level util, returns <old-key-val>."}, map-vals {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1162, :column 9, :end-line 1162, :end-column 17, :arglists (quote ([f m]))}, :name taoensso.encore/map-vals, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1162, :end-line 1162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, spaced-str-with-nils {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3183, :column 9, :end-line 3183, :end-column 29, :arglists (quote ([xs]))}, :name taoensso.encore/spaced-str-with-nils, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 29, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3183, :end-line 3183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, str-join-once {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2158, :column 7, :end-line 2158, :end-column 20, :arglists (quote ([separator coll])), :doc "Like `string/join` but skips duplicate separators."}, :name taoensso.encore/str-join-once, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([separator coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2158, :end-line 2158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([separator coll])), :doc "Like `string/join` but skips duplicate separators."}, nested-merge-with {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1295, :column 9, :end-line 1295, :end-column 26, :arglists (quote ([f & maps])), :doc "Like `merge-with` but does nested merging.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}}, :name taoensso.encore/nested-merge-with, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}, :method-params [(f maps)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 1295, :end-line 1295, :max-fixed-arity 1, :fn-var true, :arglists ([f & maps]), :doc "Like `merge-with` but does nested merging."}, as-?float {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 616, :column 9, :end-line 616, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-?float, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 616, :end-line 616, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, explode-keyword {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 704, :column 7, :end-line 704, :end-column 22, :arglists (quote ([k]))}, :name taoensso.encore/explode-keyword, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 704, :end-line 704, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, as-?nblank {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 595, :column 9, :end-line 595, :end-column 19, :arglists (quote ([x]))}, :name taoensso.encore/as-?nblank, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 595, :end-line 595, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, sentinel->nil {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3357, :column 9, :end-line 3357, :end-column 22, :arglists (quote ([x]))}, :name taoensso.encore/sentinel->nil, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3357, :end-line 3357, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, xdistinct {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1144, :column 9, :end-line 1144, :end-column 18, :arglists (quote ([] [keyfn])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [keyfn]), :arglists ([] [keyfn]), :arglists-meta (nil nil)}}, :name taoensso.encore/xdistinct, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [keyfn]), :arglists ([] [keyfn]), :arglists-meta (nil nil)}, :method-params ([] [keyfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1144, :end-line 1144, :max-fixed-arity 1, :fn-var true, :arglists ([] [keyfn])}, assoc-some {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1016, :column 9, :end-line 1016, :end-column 19, :arglists (quote ([m k v] [m k v & kvs])), :doc "Assocs each kv iff its value is not nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}}, :name taoensso.encore/assoc-some, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1016, :end-line 1016, :max-fixed-arity 3, :fn-var true, :arglists ([m k v] [m k v & kvs]), :doc "Assocs each kv iff its value is not nil."}, keys=nnil? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3204, :column 9, :end-line 3204, :end-column 19, :arglists (quote ([m ks]))}, :name taoensso.encore/keys=nnil?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3204, :end-line 3204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks]))}, simple-ident? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 487, :column 18, :end-line 487, :end-column 31, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/simple-ident?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 487, :ret-tag boolean, :end-line 487, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-bool {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 678, :column 9, :end-line 678, :end-column 16, :arglists (quote ([x]))}, :name taoensso.encore/as-bool, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 678, :end-line 678, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, errorf {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3250, :column 11, :end-line 3250, :end-column 17, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/errorf, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 3250, :end-line 3250, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, clj1098 {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3262, :column 9, :end-line 3262, :end-column 16, :arglists (quote ([x])), :doc "Ref. http://goo.gl/0GzRuz"}, :name taoensso.encore/clj1098, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3262, :end-line 3262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Ref. http://goo.gl/0GzRuz"}, parse-bool {:name taoensso.encore/parse-bool, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3126, :column 3, :end-line 3126, :end-column 18, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3126, :column 8, :end-line 3126, :end-column 18}}, keys<= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3202, :column 9, :end-line 3202, :end-column 15, :arglists (quote ([m ks]))}, :name taoensso.encore/keys<=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3202, :end-line 3202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks]))}, str-replace {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2108, :column 7, :end-line 2108, :end-column 18, :arglists (quote ([s match replacement])), :doc "Like `str/replace` but provides consistent clj/s behaviour.\n\n  Workaround for http://dev.clojure.org/jira/browse/CLJS-794,\n                 http://dev.clojure.org/jira/browse/CLJS-911.\n\n  Note that ClojureScript 1.7.145 introduced a partial fix for CLJS-911.\n  A full fix could unfortunately not be introduced w/o breaking compatibility\n  with the previously incorrect behaviour. CLJS-794 also remains unresolved."}, :name taoensso.encore/str-replace, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2108, :end-line 2108, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Like `str/replace` but provides consistent clj/s behaviour.\n\n  Workaround for http://dev.clojure.org/jira/browse/CLJS-794,\n                 http://dev.clojure.org/jira/browse/CLJS-911.\n\n  Note that ClojureScript 1.7.145 introduced a partial fix for CLJS-911.\n  A full fix could unfortunately not be introduced w/o breaking compatibility\n  with the previously incorrect behaviour. CLJS-794 also remains unresolved."}, parse-int {:name taoensso.encore/parse-int, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3127, :column 3, :end-line 3127, :end-column 17, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3127, :column 8, :end-line 3127, :end-column 17}}, get-win-loc {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2530, :column 7, :end-line 2530, :end-column 18, :arglists (quote ([])), :doc "Returns `js/window`'s current location as a map."}, :name taoensso.encore/get-win-loc, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2530, :end-line 2530, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns `js/window`'s current location as a map."}, get-substr {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2036, :column 7, :end-line 2036, :end-column 17, :arglists (quote ([s start] [s start end])), :doc "Like `subs` but provides consistent clj/s behaviour and never throws\n  (snaps to valid start and end indexes).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}}, :name taoensso.encore/get-substr, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}, :method-params ([s start] [s start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2036, :end-line 2036, :max-fixed-arity 3, :fn-var true, :arglists ([s start] [s start end]), :doc "Like `subs` but provides consistent clj/s behaviour and never throws\n  (snaps to valid start and end indexes)."}, without-meta {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 931, :column 7, :end-line 931, :end-column 19, :arglists (quote ([x]))}, :name taoensso.encore/without-meta, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 931, :end-line 931, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, memoize1 {:name taoensso.encore/memoize1, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3135, :column 3, :end-line 3135, :end-column 16, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3135, :column 8, :end-line 3135, :end-column 16}}, round1 {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 903, :column 9, :end-line 903, :end-column 15, :arglists (quote ([n]))}, :name taoensso.encore/round1, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 903, :end-line 903, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ->DefaultTimeoutImpl {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2968, :column 12, :end-line 2968, :end-column 30, :protocols #{taoensso.encore/ITimeoutImpl}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{taoensso.encore/ITimeoutImpl}, :name taoensso.encore/->DefaultTimeoutImpl, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :factory :positional, :line 2968, :end-line 2968, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, merge-deep-with {:name taoensso.encore/merge-deep-with, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3124, :column 3, :end-line 3124, :end-column 23, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3124, :column 8, :end-line 3124, :end-column 23}}, as-email {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 668, :column 9, :end-line 668, :end-column 17, :arglists (quote ([x]))}, :name taoensso.encore/as-email, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 668, :end-line 668, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, pull-val! {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1457, :column 7, :end-line 1457, :end-column 16, :arglists (quote ([atom_ k] [atom_ k not-found])), :doc "Removes and returns value mapped to key.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atom_ k] [atom_ k not-found]), :arglists ([atom_ k] [atom_ k not-found]), :arglists-meta (nil nil)}}, :name taoensso.encore/pull-val!, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atom_ k] [atom_ k not-found]), :arglists ([atom_ k] [atom_ k not-found]), :arglists-meta (nil nil)}, :method-params ([atom_ k] [atom_ k not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1457, :end-line 1457, :max-fixed-arity 3, :fn-var true, :arglists ([atom_ k] [atom_ k not-found]), :doc "Removes and returns value mapped to key."}, vec3? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 498, :column 18, :end-line 498, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/vec3?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 498, :ret-tag boolean, :end-line 498, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, tf-state {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2994, :column 4, :end-line 2994, :end-column 12, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns a map of timeout's public state.", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-state, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 12, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2994, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns a map of timeout's public state."}, assert-min-encore-version {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 958, :column 7, :end-line 958, :end-column 32, :arglists (quote ([min-version])), :doc "Version check for dependency conflicts, etc."}, :name taoensso.encore/assert-min-encore-version, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 32, :method-params ([min-version]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 958, :end-line 958, :max-fixed-arity 1, :fn-var true, :arglists (quote ([min-version])), :doc "Version check for dependency conflicts, etc."}, replace-in {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3376, :column 9, :end-line 3376, :end-column 19, :arglists (quote ([m & ops])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(m ops)], :arglists ([m & ops]), :arglists-meta (nil)}}, :name taoensso.encore/replace-in, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(m ops)], :arglists ([m & ops]), :arglists-meta (nil)}, :method-params [(m ops)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3376, :end-line 3376, :max-fixed-arity 1, :fn-var true, :arglists ([m & ops])}, revery-kv? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 831, :column 9, :end-line 831, :end-column 19, :arglists (quote ([pred coll]))}, :name taoensso.encore/revery-kv?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 831, :end-line 831, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, assoc-when {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1021, :column 9, :end-line 1021, :end-column 19, :arglists (quote ([m k v] [m k v & kvs])), :doc "Assocs each kv iff its val is truthy.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}}, :name taoensso.encore/assoc-when, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m k v]), :arglists ([m k v] [m k v & kvs]), :arglists-meta (nil nil)}, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1021, :end-line 1021, :max-fixed-arity 3, :fn-var true, :arglists ([m k v] [m k v & kvs]), :doc "Assocs each kv iff its val is truthy."}, as-?qname {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 598, :column 9, :end-line 598, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-?qname, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 598, :end-line 598, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, rfirst {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 828, :column 9, :end-line 828, :end-column 15, :arglists (quote ([pred coll]))}, :name taoensso.encore/rfirst, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 828, :end-line 828, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, logp {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2524, :column 9, :end-line 2524, :end-column 13, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.encore/logp, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2524, :end-line 2524, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, as-map {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3299, :column 9, :end-line 3299, :end-column 15, :arglists (quote ([kvs & [kf vf]])), :doc "Deprecated, prefer `reduce-kvs`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(kvs [kf vf])], :arglists ([kvs & [kf vf]]), :arglists-meta (nil)}}, :name taoensso.encore/as-map, :variadic true, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(kvs [kf vf])], :arglists ([kvs & [kf vf]]), :arglists-meta (nil)}, :method-params [(kvs [kf vf])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3299, :end-line 3299, :max-fixed-arity 1, :fn-var true, :arglists ([kvs & [kf vf]]), :doc "Deprecated, prefer `reduce-kvs`"}, vec* {:name taoensso.encore/vec*, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 986, :column 5, :end-line 986, :end-column 14, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 986, :column 10, :end-line 986, :end-column 14}}, get-subvector {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1045, :column 7, :end-line 1045, :end-column 20, :arglists (quote ([v start] [v start length])), :doc "Like `get-subvec` but:\n    - Takes `length` instead of `end` (index).\n    - -ive `start` => index from right of vector.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start length]), :arglists ([v start] [v start length]), :arglists-meta (nil nil)}}, :name taoensso.encore/get-subvector, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start length]), :arglists ([v start] [v start length]), :arglists-meta (nil nil)}, :method-params ([v start] [v start length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1045, :end-line 1045, :max-fixed-arity 3, :fn-var true, :arglists ([v start] [v start length]), :doc "Like `get-subvec` but:\n    - Takes `length` instead of `end` (index).\n    - -ive `start` => index from right of vector."}, tf-pending? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2997, :column 4, :end-line 2997, :end-column 15, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns true iff the timeout is pending.", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-pending?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2997, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true iff the timeout is pending."}, backport-run! {:name taoensso.encore/backport-run!, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 3121, :column 3, :end-line 3121, :end-column 21, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3121, :column 8, :end-line 3121, :end-column 21}}, qualified-symbol? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 490, :column 18, :end-line 490, :end-column 35, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/qualified-symbol?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 35, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 490, :ret-tag boolean, :end-line 490, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, keys= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3201, :column 9, :end-line 3201, :end-column 14, :arglists (quote ([m ks]))}, :name taoensso.encore/keys=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3201, :end-line 3201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks]))}, tf-cancelled? {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 2998, :column 4, :end-line 2998, :end-column 17, :protocol taoensso.encore/ITimeoutFuture, :doc "Returns true iff the timeout is cancelled.", :arglists (quote ([_]))}, :protocol taoensso.encore/ITimeoutFuture, :name taoensso.encore/tf-cancelled?, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 17, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2993, :end-line 2998, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true iff the timeout is cancelled."}, max-long {:name taoensso.encore/max-long, :file ".cljs_rhino_repl/taoensso/encore.cljs", :line 851, :column 1, :end-line 851, :end-column 22, :const true, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 851, :column 14, :end-line 851, :end-column 22, :const true}}, swapped-vec {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1315, :column 9, :end-line 1315, :end-column 20, :arglists (quote ([x]))}, :name taoensso.encore/swapped-vec, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1315, :end-line 1315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, DefaultTimeoutImpl {:num-fields 0, :protocols #{taoensso.encore/ITimeoutImpl}, :name taoensso.encore/DefaultTimeoutImpl, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 30, :type true, :column 12, :line 2968, :record false, :end-line 2968, :skip-protocol-flag nil}, ks>= {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1172, :column 40, :end-line 1172, :end-column 44, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.encore/ks>=, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 44, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 1172, :ret-tag boolean, :end-line 1172, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, ->vec {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 3361, :column 9, :end-line 3361, :end-column 14, :arglists (quote ([x]))}, :name taoensso.encore/->vec, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 3361, :end-line 3361, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, as-?pos-int {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 625, :column 9, :end-line 625, :end-column 20, :arglists (quote ([x]))}, :name taoensso.encore/as-?pos-int, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 625, :end-line 625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, vinterleave-all {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 1240, :column 7, :end-line 1240, :end-column 22, :arglists (quote ([c1 c2]))}, :name taoensso.encore/vinterleave-all, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 22, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1240, :end-line 1240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, round2 {:protocol-inline nil, :meta {:file "/home/rilla/code/clojure/clojurescript/rpi_wall/.cljs_rhino_repl/taoensso/encore.cljs", :line 904, :column 9, :end-line 904, :end-column 15, :arglists (quote ([n]))}, :name taoensso.encore/round2, :variadic false, :file ".cljs_rhino_repl/taoensso/encore.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 904, :end-line 904, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}}, :require-macros {enc-macros taoensso.encore, taoensso.encore taoensso.encore, test cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:args :max-len :nest :taoensso.encore/dynamic :nblank :?ratio :min :given ms :email :report :nat-float :mem/all :get worst-sid :backoff-ms :fn :hash :rl/reset :ev result__ delay newv :rl/peek :?content f__26148__auto__ :else :int :keywordize :err-type :reset :protocol :pval :unknown udt0 :rl/all :method :default :pathname :float :xhr-pool-depleted :warn :msecs :name :trace :req-id :qualifier :swap/dissoc :readers long :secs :loaded :mem/del :months :params :days :type :pos-float :mins do :debug :err-cause :hostname tick-lru :qname :form-data :search :abort :udt :kw :timeout/cancelled :fail-?data :stub :http-error :headers :fatal :round n m :timeout/pending :progress-fn :host :total :with-credentials? :after :blacklist :ajax/resp-as-text :nat-int worst-ms clojure.lang.IAtom :mem/fresh :result :max :factor returnv :err-msg :edn :raw-resp cljs.core/fn :info tick-lfu udt :?content-type :ajax/bad-response-type :hours :years :nzero :error :?status :exception :tag :bool :json :timeout :resp-type :version :min-version :your-version :whitelist :ms :doc :xml :before :success? :nempty-str :length-computable? :auto :end-idx :xhr :weeks :nemail :url-encoded :href :timeout-ms :?error :text f :pos-int}, :order [:doc :readers :taoensso.encore/dynamic :default :given :type :err-type :err-msg :err-cause :else :fail-?data :nzero :nblank :nempty-str :kw :name :qname :email :nemail :udt :int :nat-int :pos-int :float :nat-float :pos-float :pval :bool :round :min :max :factor :version :qualifier :min-version :your-version :swap/dissoc :nest newv returnv clojure.lang.IAtom :mem/del :mem/all :mem/fresh delay udt :tag long tick-lru tick-lfu n ms udt0 m worst-sid worst-ms :rl/reset :rl/all :rl/peek :req-id :years :months :weeks :days :hours :mins :secs :msecs :ms :href :protocol :hostname :host :pathname :search :hash :url-encoded :form-data :method :get :params :headers :timeout-ms :resp-type :auto :with-credentials? :?error :timeout :text :edn :json :xml :ajax/bad-response-type :ajax/resp-as-text :raw-resp :xhr :success? :?status :?content-type :?content :exception :http-error :abort :unknown :progress-fn :?ratio :length-computable? :loaded :total :ev :xhr-pool-depleted :stub :args :whitelist :blacklist :timeout/pending :timeout/cancelled :fn f result__ :before do :after cljs.core/fn f__26148__auto__ :reset :backoff-ms :result :debug :trace :info :warn :error :fatal :report :keywordize :max-len :end-idx]}, :doc "Extended core library for Clojure/Script that emphasizes:\n    * Cross platform API compatibility\n    * Flexibility\n    * Performance\n    * Backwards compatibility\n\n  This lib's mostly for my own use and for advanced users that feel\n  comfortable reading this source. Not providing much beginner-oriented\n  documentation for this, sorry.\n\n  Quick Taoensso naming conventions:\n    **foo** - Dynamic var.\n    foo!    - Fn with side effects, or that should otherwise be used cautiously.\n    foo?    - Truthy val or fn that returns truthy val.\n    foo!?   - Fn that has side effetcs (or requires caution) and that returns\n              a truthy val. Note: !?, not ?!.\n    foo$    - Fn that's notably expensive to compute (e.g. hits db).\n    foo_    - Dereffable val (e.g. atom, volatile, delay, etc.).\n    _       - Unnamed val.\n    _foo    - Named but unused val.\n    ?foo    - Optional val (emphasize that val may be nil).\n    foo*    - A variation of `foo` (e.g. `foo*` macro vs `foo` fn).\n    -foo    - Public implementation detail or intermediate (e.g. uncoerced) val.\n    >foo    - Val \"to foo\" (e.g. >sender, >host), or fn to put/coerce/transform.\n    <foo    - Val \"from foo\" (e.g. <sender, <host), or fn to take/coerce/transform.\n    ->foo   - Fn to put/coerce/transform."}